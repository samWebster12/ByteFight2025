window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"game": {"fullname": "game", "modulename": "game", "kind": "module", "doc": "<p>This document provides a introduction to the documentation for how to play the game. Documentation for classes\navailable to players can be found to the left, and source code can be viewed from documentation as well.</p>\n\n<p><strong>About PlayerBoard</strong></p>\n\n<p>Eacn turn and bid, you will be given a <code>PlayerBoard</code> (in <code>game.player_board</code>) instance, representing\na copy of the current game state. You will also be given a callable <code>time_left()</code> function that, when called, will provide you \nwith the amount of time you have left for your turn in seconds. </p>\n\n<p>A couple types of functions to look out for:</p>\n\n<ul>\n<li><code>get_</code> type functions (i.e. <code>get_dim_x</code>, <code>get_direction</code>, <code>get_portal_dict</code>): return information about the board or player</li>\n<li><code>get_mask</code> type functions (i.e. <code>get_trap_mask</code>, <code>get_snake_mask</code>): returns a board-sized array with only the cells containing\nthe relevant type of cell</li>\n<li><code>is_</code> type functions (i.e. <code>is_possible_direction</code>, <code>is_portal</code>): checks if some condition is true</li>\n<li><code>is_valid</code> type functions (i.e. <code>is_valid_action</code>, <code>is_valid_turn</code>): checks if a given action or turn is valid</li>\n<li><code>try_</code> type functions (i.e. <code>try_action</code>, <code>try_trap</code>): returns the outputs of a specific action if it were to occur, without changing the board</li>\n<li><code>apply_</code> type functions (i.e. <code>apply_action</code>, <code>apply_turn</code>): applies a bid, action, or turn to the board. Returns if the operation was successful.</li>\n<li><code>forecast_</code> type functions (i.e. <code>forecast_bid</code>, <code>forecast_turn</code>): applies a bid, action, or turn to a copy of the board, then returns the board copy along with if the operation was successful.</li>\n</ul>\n\n<p>Both <code>apply_turn</code> and <code>forecast_turn</code> end a turn and pass to the next player, whereas other apply and forecast functions do not.\n<code>PlayerBoard.end_turn()</code> may be used to complete/pass a turn. Also note that <code>apply_turn</code> and <code>forecast_turn</code> do not automatically\nreverse the perspective of the board - that is, functions will still call as if you are the player and your opponent is the \nenemy. If you want to call methods for your opponent on the next turn, either use the <code>enemy</code> parameter, call \n<code>PlayerBoard.reverse_perspective()</code>, or pass the <code>reverse</code> flag into <code>apply_turn</code> and <code>forecast_turn</code>.</p>\n\n<p>Finally, remember that coordinates are returned in (x, y) form, but any arrays representing\nthe board should be indexed in the form of [y, x]</p>\n\n<p><strong>Getting Started</strong></p>\n\n<p>If you're lost about where to get started, we recommend that you take a look at\nthe following PlayerBoard functions: <code>get_possible_directions</code>, <code>is_valid_turn</code>, <code>is_valid_action</code>, <code>apply_turn</code>, <code>apply_action</code>, <code>forecast_turn</code>, and <code>forecast_action</code>,\nas well as looking at the possible <code>Action</code>s in <code>game.enums</code></p>\n\n<p><strong>Extending the Board</strong></p>\n\n<p>The <code>PlayerBoard</code> class provides basic, low-level ways to interact with the board.\nYou can write your own methods that use <code>PlayerBoard</code> as a parameter for more complex functionality,\nand you can even wrap the <code>PlayerBoard</code> class in a class that you design.</p>\n\n<p>You can also use methods from the underlying classes that <code>PlayerBoard</code> wraps,\nsuch as <code>Board</code>, <code>Snake</code>, and <code>Queue</code>. You can do this by accessing the <code>PlayerBoard.game_board</code>\nvariable, and using its functions/variables.</p>\n\n<p>If you want to extend these classes we recommend that you at least read the documentation and if you're curious read the \nsource code either from the scaffold we give you or from the documentation.</p>\n"}, "game.board": {"fullname": "game.board", "modulename": "game.board", "kind": "module", "doc": "<p></p>\n"}, "game.board.Board": {"fullname": "game.board.Board", "modulename": "game.board", "qualname": "Board", "kind": "class", "doc": "<p>Board is the game engine's representation of the current match.</p>\n\n<p>Any coordinates should be given to the board in the form of x, y.\nGame objects are displayed, indexed, and stored on the \nboard arrays as y, x for geometrical accuracy.</p>\n\n<p>Check_validity is on by default for most functions, but slows\ndown execution. If a player is confident their actions are valid,\nthey can directly apply turns and moves with check_validity as false.</p>\n\n<p>Be wary that invalid actions/turns could lead to functions throwing\nerrors, so make sure to handle them with a try/except in case so that\nyour program doesn't crash. If an apply function throws an error,\nit is not guarenteed that the board state will be valid or that the state\nwill be the same as when the function started.</p>\n"}, "game.board.Board.__init__": {"fullname": "game.board.Board.__init__", "modulename": "game.board", "qualname": "Board.__init__", "kind": "function", "doc": "<p>Initializes the board with the specified game map and configuration options.</p>\n\n<p>Parameters:<br />\n    game_map (game_map.Map): The map representing the game environment.<br />\n    time_to_play (float, optional): The time limit for the game in seconds. Defaults to 65536.<br />\n    build_history (bool, optional): Whether to track the history of the game. Defaults to False.<br />\n    copy (bool, optional): Whether to initialize a copy of the game map. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">game_map</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_map</span><span class=\"o\">.</span><span class=\"n\">Map</span>,</span><span class=\"param\">\t<span class=\"n\">time_to_play</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">build_history</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">copy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "game.board.Board.map": {"fullname": "game.board.Board.map", "modulename": "game.board", "qualname": "Board.map", "kind": "variable", "doc": "<p></p>\n"}, "game.board.Board.set_errlog": {"fullname": "game.board.Board.set_errlog", "modulename": "game.board", "qualname": "Board.set_errlog", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">errlog</span>, </span><span class=\"param\"><span class=\"n\">player_a</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.is_as_turn": {"fullname": "game.board.Board.is_as_turn", "modulename": "game.board", "qualname": "Board.is_as_turn", "kind": "function", "doc": "<p>Returns:<br />\n    bool: If it is player a's turn to play.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_a_time": {"fullname": "game.board.Board.get_a_time", "modulename": "game.board", "qualname": "Board.get_a_time", "kind": "function", "doc": "<p>Returns:<br />\n    float: Time in seconds that player a has to make a turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_b_time": {"fullname": "game.board.Board.get_b_time", "modulename": "game.board", "qualname": "Board.get_b_time", "kind": "function", "doc": "<p>Returns:<br />\n    float: Time in seconds that player b has to make a turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "game.board.Board.has_apple_tuple": {"fullname": "game.board.Board.has_apple_tuple", "modulename": "game.board", "qualname": "Board.has_apple_tuple", "kind": "function", "doc": "<p>Returns whether there is an apple at the provided location. The location should be in the form (x, y).</p>\n\n<p>Parameters:<br />\n    loc (tuple): The coordinates (x, y) of the location to check for an apple.  </p>\n\n<p>Returns:<br />\n    bool: True if there is an apple at the specified location, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.has_apple": {"fullname": "game.board.Board.has_apple", "modulename": "game.board", "qualname": "Board.has_apple", "kind": "function", "doc": "<p>Returns whether there is an apple at the given coordinates (x, y).  </p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate to check for an apple.<br />\n    y (int): The y-coordinate to check for an apple.  </p>\n\n<p>Returns:<br />\n    bool: True if there is an apple at the given coordinates, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.tiebreak": {"fullname": "game.board.Board.tiebreak", "modulename": "game.board", "qualname": "Board.tiebreak", "kind": "function", "doc": "<p>Tiebreaks the game. Tiebreak occurs first by apples eaten, then by ending length\nof snake. If both are equal result is a tie.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.set_build_history": {"fullname": "game.board.Board.set_build_history", "modulename": "game.board", "qualname": "Board.set_build_history", "kind": "function", "doc": "<p>Sets whether the history of the game should be recorded.</p>\n\n<p>Parameters:<br />\n    build_history (bool): Whether to track the game history. True to record, False to not record.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">build_history</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.set_winner": {"fullname": "game.board.Board.set_winner", "modulename": "game.board", "qualname": "Board.set_winner", "kind": "function", "doc": "<p>Sets the winner and the reason for the game's outcome.</p>\n\n<p>Parameters:<br />\n    result (enums.Result): The winner of the game.\n    reason (str, optional): The reason for the outcome. Defaults to \"invalid\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Result</span>, </span><span class=\"param\"><span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;invalid&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.get_winner": {"fullname": "game.board.Board.get_winner", "modulename": "game.board", "qualname": "Board.get_winner", "kind": "function", "doc": "<p>Returns the winner of the game.</p>\n\n<p>Returns:<br />\n    enums.Result: The winner of the game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Result</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_win_reason": {"fullname": "game.board.Board.get_win_reason", "modulename": "game.board", "qualname": "Board.get_win_reason", "kind": "function", "doc": "<p>Returns the string explaining the reason why the game was won.</p>\n\n<p>Returns:<br />\n    str: The reason for the game's outcome.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_history_json": {"fullname": "game.board.Board.get_history_json", "modulename": "game.board", "qualname": "Board.get_history_json", "kind": "function", "doc": "<p>Encodes the entire history of the game in a format readable by the renderer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_bid": {"fullname": "game.board.Board.is_valid_bid", "modulename": "game.board", "qualname": "Board.is_valid_bid", "kind": "function", "doc": "<p>Returns whether a given starting bid is valid.</p>\n\n<p>Parameters:<br />\n    bid (int): The starting bid to check.</p>\n\n<p>Returns:<br />\n    bool: True if the bid is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.resolve_bid": {"fullname": "game.board.Board.resolve_bid", "modulename": "game.board", "qualname": "Board.resolve_bid", "kind": "function", "doc": "<p>Resolves the bid between two players. The player with the higher bid \ngets to go first. If the bids are equal, the starting player is \ndetermined by a coin toss.</p>\n\n<p>Parameters:<br />\n    bidA (int): The bid from player A.<br />\n    bidB (int): The bid from player B.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bidA</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">bidB</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.get_bid_resolved": {"fullname": "game.board.Board.get_bid_resolved", "modulename": "game.board", "qualname": "Board.get_bid_resolved", "kind": "function", "doc": "<p>Returns whether the bid for the first turn has been resolved.</p>\n\n<p>Returns:<br />\n    bool: True if the bid has been resolved, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_trap": {"fullname": "game.board.Board.is_valid_trap", "modulename": "game.board", "qualname": "Board.is_valid_trap", "kind": "function", "doc": "<p>Returns whether the current player can deploy a trap.</p>\n\n<p>Parameters:<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.</p>\n\n<p>Returns:<br />\n    bool: True if the current player can apply a trap, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_action": {"fullname": "game.board.Board.is_valid_action", "modulename": "game.board", "qualname": "Board.is_valid_action", "kind": "function", "doc": "<p>Returns whether the given action is valid for the current player.</p>\n\n<p>If the action is a trap, it checks if the trap is valid for the current player.\nOtherwise, it checks if the move is valid.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to validate.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.</p>\n\n<p>Returns:<br />\n    bool: True if the action is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_move": {"fullname": "game.board.Board.is_valid_move", "modulename": "game.board", "qualname": "Board.is_valid_move", "kind": "function", "doc": "<p>Returns whether the given move is valid for the current player.</p>\n\n<p>If a sacrifice is applied, it checks if the move is still valid given the sacrifice. </p>\n\n<p>Parameters:<br />\n    move (enums.Action): The move to validate.<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. If not provided, the current sacrifice value is used.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.</p>\n\n<p>Returns:<br />\n    bool: True if the move is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_turn": {"fullname": "game.board.Board.is_valid_turn", "modulename": "game.board", "qualname": "Board.is_valid_turn", "kind": "function", "doc": "<p>Returns if the given turn is a valid turn.\nA turn can be an Action or iterable of Actions. Actions can either be\nin the form of enums given in game.enums.Action or the ints to which the Action\nenum is mapped.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.</p>\n\n<p>Returns:<br />\n    bool: True if the turn is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_cell": {"fullname": "game.board.Board.is_valid_cell", "modulename": "game.board", "qualname": "Board.is_valid_cell", "kind": "function", "doc": "<p>Checks if the cell is in bounds of the board, then if it is available to\nbe moved into.</p>\n\n<p>Parameters:<br />\n    loc (tuple or numpy.ndarray): The coordinates of the cell to check, in the form (x, y).</p>\n\n<p>Returns:<br />\n    bool: True if the cell is valid (in bounds and available), False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.is_valid_cell_copy": {"fullname": "game.board.Board.is_valid_cell_copy", "modulename": "game.board", "qualname": "Board.is_valid_cell_copy", "kind": "function", "doc": "<p>Checks if the cell is in bounds of the board, then if it is available to\nbe moved into using a copy of the player board (in case player snake needs to be mutated).\nFor internal usage by board class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span>, </span><span class=\"param\"><span class=\"n\">cells_player_copy</span>, </span><span class=\"param\"><span class=\"n\">cells_enemy</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.cell_in_bounds": {"fullname": "game.board.Board.cell_in_bounds", "modulename": "game.board", "qualname": "Board.cell_in_bounds", "kind": "function", "doc": "<p>Checks if a cell is within map bounds.</p>\n\n<p>Parameters:<br />\n    loc (Union[tuple, np.ndarray]): The coordinates of the cell to check, either as a tuple (x, y) or a numpy array.</p>\n\n<p>Returns:<br />\n    bool: True if the cell is within the map bounds, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.apply_decay": {"fullname": "game.board.Board.apply_decay", "modulename": "game.board", "qualname": "Board.apply_decay", "kind": "function", "doc": "<p>Applies a round of decay.</p>\n\n<p>Parameters:<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.<br />\n    check_validity (bool, optional): Whether to check the validity of the decay action. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the decay was applied successfully, False if the trap is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.increment_decay": {"fullname": "game.board.Board.increment_decay", "modulename": "game.board", "qualname": "Board.increment_decay", "kind": "function", "doc": "<p>Increments the decay process based on the current turn count and decay timeline.</p>\n\n<p>The method checks whether the turn count has reached the threshold to apply the next stage of decay \nas defined in the decay timeline. It updates the decay interval and index accordingly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.apply_turn": {"fullname": "game.board.Board.apply_turn", "modulename": "game.board", "qualname": "Board.apply_turn", "kind": "function", "doc": "<p>Applies a turn to the board, mutating the board.</p>\n\n<p>A turn can be a direction or an iterable of directions. Actions can either be in the form of enums \nfrom game.enums.Action or the ints to which the Action enum is mapped.</p>\n\n<p>If check_validity is enabled, apply_turn performs checks to ensure no errors. If check_validity is \ndisabled, the turn is assumed to be valid and runs without additional checks.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    timer (float, optional): The timer associated with the turn. Defaults to 0.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.<br />\n    check_validity (bool, optional): Whether to perform checks for validity before applying the turn. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the turn was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span>,</span><span class=\"param\">\t<span class=\"n\">timer</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">a_to_play</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.check_turn_start": {"fullname": "game.board.Board.check_turn_start", "modulename": "game.board", "qualname": "Board.check_turn_start", "kind": "function", "doc": "<p>Checks to see if an apple spawned on top of the player at the turn start.</p>\n\n<p>Parameters:<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.apply_trap": {"fullname": "game.board.Board.apply_trap", "modulename": "game.board", "qualname": "Board.apply_trap", "kind": "function", "doc": "<p>Deploys a trap for the current player.</p>\n\n<p>Parameters:<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.<br />\n    check_validity (bool, optional): Whether to check the validity of the trap action. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the trap was applied successfully, False if the trap is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.increment_traps": {"fullname": "game.board.Board.increment_traps", "modulename": "game.board", "qualname": "Board.increment_traps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.resolve_square": {"fullname": "game.board.Board.resolve_square", "modulename": "game.board", "qualname": "Board.resolve_square", "kind": "function", "doc": "<p>Resolves the state of a square on the board that a player just moved onto. For internal use by board.\nThis function resolves apples and interaction with traps when a player moves onto it.</p>\n\n<p>Parameters:\n    x (int): The x-coordinate of the square to resolve.<br />\n    y (int): The y-coordinate of the square to resolve.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.<br />\n    check_validity (bool, optional): Whether to perform checks for validity before resolving the square. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the square was resolved successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.apply_move": {"fullname": "game.board.Board.apply_move", "modulename": "game.board", "qualname": "Board.apply_move", "kind": "function", "doc": "<p>Applies a move to the board, mutating the board.</p>\n\n<p>A move should be in the form of a direction. Actions can either be in the form of enums \nfrom game.enums.Action or the ints to which the Action enum is mapped.</p>\n\n<p>If check_validity is enabled, apply_move performs checks to ensure no errors. \nIf check_validity is disabled, the move is assumed to be valid and runs without additional checks.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action representing the direction to move.<br />\n    sacrifice (int, optional): The amount of sacrifice applied to the move. Defaults to None.<br />\n    a_to_play (bool, optional): The player whose turn it is. If not provided, the current player is used.<br />\n    check_validity (bool, optional): Whether to perform checks for validity before applying the move. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the move was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">a_to_play</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.board.Board.next_turn": {"fullname": "game.board.Board.next_turn", "modulename": "game.board", "qualname": "Board.next_turn", "kind": "function", "doc": "<p>Advances the board to the next turn, recording and managing necessary game metadata.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.spawn_apples": {"fullname": "game.board.Board.spawn_apples", "modulename": "game.board", "qualname": "Board.spawn_apples", "kind": "function", "doc": "<p>Spawns in apples on the current round.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.board.Board.get_history": {"fullname": "game.board.Board.get_history", "modulename": "game.board", "qualname": "Board.get_history", "kind": "function", "doc": "<p>Get a dictionary representation for the renderer.</p>\n\n<p>Returns:<br />\n    dict: A dictionary representing the game history.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_map_generated": {"fullname": "game.board.Board.get_map_generated", "modulename": "game.board", "qualname": "Board.get_map_generated", "kind": "function", "doc": "<p>Gets the map that is played on (including apple spawns).</p>\n\n<p>Returns:<br />\n    str: A string representation of the generated map.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_copy": {"fullname": "game.board.Board.get_copy", "modulename": "game.board", "qualname": "Board.get_copy", "kind": "function", "doc": "<p>Returns a deep copy of the board.</p>\n\n<p>Parameters:<br />\n    build_history (bool, optional): Whether to include the history of the game in the copy. Defaults to False.</p>\n\n<p>Returns:<br />\n    Board: A deep copy of the current board object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">build_history</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Board</span>:</span></span>", "funcdef": "def"}, "game.board.Board.forecast_trap": {"fullname": "game.board.Board.forecast_trap", "modulename": "game.board", "qualname": "Board.forecast_trap", "kind": "function", "doc": "<p>Non-mutating version of apply_trap. Returns a tuple with the new board copy, then\nwhether the trap was deployed successfully.</p>\n\n<p>Parameters:<br />\n    check_validity (bool, optional): Whether to validate the trap. Defaults to True.</p>\n\n<p>Returns:<br />\n   tuple: A tuple containing:<br />\n        - Board: A copy of the board after the move.\n        - bool: True if the trap was successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Board</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.board.Board.forecast_move": {"fullname": "game.board.Board.forecast_move", "modulename": "game.board", "qualname": "Board.forecast_move", "kind": "function", "doc": "<p>Non-mutating version of apply_move. Returns a tuple with the new board copy, then\nwhether the move executed properly.</p>\n\n<p>Parameters:\n    move (enums.Action): The action to apply (direction of movement).\n    sacrifice (int, optional): The amount of sacrifice to apply. Defaults to None.\n    check_validity (bool, optional): Whether to validate the move. Defaults to True.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - Board: A copy of the board after the move.<br />\n        - bool: True if the move was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Board</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.board.Board.forecast_turn": {"fullname": "game.board.Board.forecast_turn", "modulename": "game.board", "qualname": "Board.forecast_turn", "kind": "function", "doc": "<p>Non-mutating version of apply_turn. Returns a tuple with the new board copy, then\nwhether the turn executed properly.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    check_validity (bool, optional): Whether to validate the turn. Defaults to True.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - Board: A copy of the board after the turn.<br />\n        - bool: True if the turn was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Board</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.board.Board.get_board_string": {"fullname": "game.board.Board.get_board_string", "modulename": "game.board", "qualname": "Board.get_board_string", "kind": "function", "doc": "<p>Returns a string representation of the current state of the board, including player positions, apples, and traps. Mostly for internal\nuse by developers.</p>\n\n<ul>\n<li>Player positions (<code>A</code> for snake A's head, <code>a</code> for snake A's body, <code>B</code> for snake B's head, <code>b</code> for snake B's body, and <code>x</code> for walls)</li>\n<li>Apple positions (<code>.</code> for apples)</li>\n<li>Trap positions (<code>a</code> for traps belonging to snake A, <code>b</code> for traps belonging to snake B)</li>\n</ul>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n    - player_map (str): String representation of player positions.<br />\n    - apple_map (str): String representation of apple positions.<br />\n    - trap_map (str): String representation of trap positions.<br />\n    - snake_a_length (int): Length of snake A.<br />\n    - snake_b_length (int): Length of snake B.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.enums": {"fullname": "game.enums", "modulename": "game.enums", "kind": "module", "doc": "<p></p>\n"}, "game.enums.Result": {"fullname": "game.enums.Result", "modulename": "game.enums", "qualname": "Result", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.IntEnum"}, "game.enums.Result.PLAYER_A": {"fullname": "game.enums.Result.PLAYER_A", "modulename": "game.enums", "qualname": "Result.PLAYER_A", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Result.PLAYER_A: 0&gt;"}, "game.enums.Result.PLAYER_B": {"fullname": "game.enums.Result.PLAYER_B", "modulename": "game.enums", "qualname": "Result.PLAYER_B", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Result.PLAYER_B: 1&gt;"}, "game.enums.Result.TIE": {"fullname": "game.enums.Result.TIE", "modulename": "game.enums", "qualname": "Result.TIE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Result.TIE: 2&gt;"}, "game.enums.Result.ERROR": {"fullname": "game.enums.Result.ERROR", "modulename": "game.enums", "qualname": "Result.ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Result.ERROR: 3&gt;"}, "game.enums.Action": {"fullname": "game.enums.Action", "modulename": "game.enums", "qualname": "Action", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.IntEnum"}, "game.enums.Action.NORTH": {"fullname": "game.enums.Action.NORTH", "modulename": "game.enums", "qualname": "Action.NORTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.NORTH: 0&gt;"}, "game.enums.Action.NORTHEAST": {"fullname": "game.enums.Action.NORTHEAST", "modulename": "game.enums", "qualname": "Action.NORTHEAST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.NORTHEAST: 1&gt;"}, "game.enums.Action.EAST": {"fullname": "game.enums.Action.EAST", "modulename": "game.enums", "qualname": "Action.EAST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.EAST: 2&gt;"}, "game.enums.Action.SOUTHEAST": {"fullname": "game.enums.Action.SOUTHEAST", "modulename": "game.enums", "qualname": "Action.SOUTHEAST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.SOUTHEAST: 3&gt;"}, "game.enums.Action.SOUTH": {"fullname": "game.enums.Action.SOUTH", "modulename": "game.enums", "qualname": "Action.SOUTH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.SOUTH: 4&gt;"}, "game.enums.Action.SOUTHWEST": {"fullname": "game.enums.Action.SOUTHWEST", "modulename": "game.enums", "qualname": "Action.SOUTHWEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.SOUTHWEST: 5&gt;"}, "game.enums.Action.WEST": {"fullname": "game.enums.Action.WEST", "modulename": "game.enums", "qualname": "Action.WEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.WEST: 6&gt;"}, "game.enums.Action.NORTHWEST": {"fullname": "game.enums.Action.NORTHWEST", "modulename": "game.enums", "qualname": "Action.NORTHWEST", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.NORTHWEST: 7&gt;"}, "game.enums.Action.TRAP": {"fullname": "game.enums.Action.TRAP", "modulename": "game.enums", "qualname": "Action.TRAP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.TRAP: 8&gt;"}, "game.enums.Action.FF": {"fullname": "game.enums.Action.FF", "modulename": "game.enums", "qualname": "Action.FF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Action.FF: 9&gt;"}, "game.enums.Cell": {"fullname": "game.enums.Cell", "modulename": "game.enums", "qualname": "Cell", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.IntEnum"}, "game.enums.Cell.SPACE": {"fullname": "game.enums.Cell.SPACE", "modulename": "game.enums", "qualname": "Cell.SPACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.SPACE: 0&gt;"}, "game.enums.Cell.WALL": {"fullname": "game.enums.Cell.WALL", "modulename": "game.enums", "qualname": "Cell.WALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.WALL: 1&gt;"}, "game.enums.Cell.APPLE": {"fullname": "game.enums.Cell.APPLE", "modulename": "game.enums", "qualname": "Cell.APPLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.APPLE: 2&gt;"}, "game.enums.Cell.PLAYER_HEAD": {"fullname": "game.enums.Cell.PLAYER_HEAD", "modulename": "game.enums", "qualname": "Cell.PLAYER_HEAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.PLAYER_HEAD: 3&gt;"}, "game.enums.Cell.PLAYER_BODY": {"fullname": "game.enums.Cell.PLAYER_BODY", "modulename": "game.enums", "qualname": "Cell.PLAYER_BODY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.PLAYER_BODY: 4&gt;"}, "game.enums.Cell.ENEMY_HEAD": {"fullname": "game.enums.Cell.ENEMY_HEAD", "modulename": "game.enums", "qualname": "Cell.ENEMY_HEAD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.ENEMY_HEAD: 5&gt;"}, "game.enums.Cell.ENEMY_BODY": {"fullname": "game.enums.Cell.ENEMY_BODY", "modulename": "game.enums", "qualname": "Cell.ENEMY_BODY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Cell.ENEMY_BODY: 6&gt;"}, "game.game_map": {"fullname": "game.game_map", "modulename": "game.game_map", "kind": "module", "doc": "<p></p>\n"}, "game.game_map.Map": {"fullname": "game.game_map.Map", "modulename": "game.game_map", "qualname": "Map", "kind": "class", "doc": "<p>Map is an internal utility class used by board to initialize \nconstants and store immutable map data for the board.</p>\n"}, "game.game_map.Map.__init__": {"fullname": "game.game_map.Map.__init__", "modulename": "game.game_map", "qualname": "Map.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">map_string</span></span>)</span>"}, "game.game_map.Map.decay_timeline": {"fullname": "game.game_map.Map.decay_timeline", "modulename": "game.game_map", "qualname": "Map.decay_timeline", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.trap_timeout": {"fullname": "game.game_map.Map.trap_timeout", "modulename": "game.game_map", "qualname": "Map.trap_timeout", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.map_string": {"fullname": "game.game_map.Map.map_string", "modulename": "game.game_map", "qualname": "Map.map_string", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.trap_sacrifice": {"fullname": "game.game_map.Map.trap_sacrifice", "modulename": "game.game_map", "qualname": "Map.trap_sacrifice", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.infos": {"fullname": "game.game_map.Map.infos", "modulename": "game.game_map", "qualname": "Map.infos", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.dim_x": {"fullname": "game.game_map.Map.dim_x", "modulename": "game.game_map", "qualname": "Map.dim_x", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.dim_y": {"fullname": "game.game_map.Map.dim_y", "modulename": "game.game_map", "qualname": "Map.dim_y", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.start_a": {"fullname": "game.game_map.Map.start_a", "modulename": "game.game_map", "qualname": "Map.start_a", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.start_b": {"fullname": "game.game_map.Map.start_b", "modulename": "game.game_map", "qualname": "Map.start_b", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.start_size": {"fullname": "game.game_map.Map.start_size", "modulename": "game.game_map", "qualname": "Map.start_size", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.min_player_size": {"fullname": "game.game_map.Map.min_player_size", "modulename": "game.game_map", "qualname": "Map.min_player_size", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.is_record": {"fullname": "game.game_map.Map.is_record", "modulename": "game.game_map", "qualname": "Map.is_record", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.cells_walls": {"fullname": "game.game_map.Map.cells_walls", "modulename": "game.game_map", "qualname": "Map.cells_walls", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.max_turns": {"fullname": "game.game_map.Map.max_turns", "modulename": "game.game_map", "qualname": "Map.max_turns", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.portal_dict": {"fullname": "game.game_map.Map.portal_dict", "modulename": "game.game_map", "qualname": "Map.portal_dict", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.cells_portals": {"fullname": "game.game_map.Map.cells_portals", "modulename": "game.game_map", "qualname": "Map.cells_portals", "kind": "variable", "doc": "<p></p>\n"}, "game.game_map.Map.add_apple_spawns": {"fullname": "game.game_map.Map.add_apple_spawns", "modulename": "game.game_map", "qualname": "Map.add_apple_spawns", "kind": "function", "doc": "<p>Algorithm for determining random apple spawns in O(N*T) grid spaces,\nWhere N is the number of possible spaces and T is the number of grid spaces.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">apples_possible</span>, </span><span class=\"param\"><span class=\"n\">num_apples</span>, </span><span class=\"param\"><span class=\"n\">apples</span>, </span><span class=\"param\"><span class=\"n\">turn_num</span>, </span><span class=\"param\"><span class=\"n\">symmetry</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.game_map.Map.get_recorded_map": {"fullname": "game.game_map.Map.get_recorded_map", "modulename": "game.game_map", "qualname": "Map.get_recorded_map", "kind": "function", "doc": "<p>Replaces random apple spawns in the given string with generated spawns.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.game_map.Map.reflect": {"fullname": "game.game_map.Map.reflect", "modulename": "game.game_map", "qualname": "Map.reflect", "kind": "function", "doc": "<p>Reflects coordinates across the map given a type of symmetry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">coords</span>, </span><span class=\"param\"><span class=\"n\">symmetry</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.game_queue": {"fullname": "game.game_queue", "modulename": "game.game_queue", "kind": "module", "doc": "<p></p>\n"}, "game.game_queue.Queue": {"fullname": "game.game_queue.Queue", "modulename": "game.game_queue", "qualname": "Queue", "kind": "class", "doc": "<p>This class implements a byte queue implemented using a circular\narray, optimized by numpy vectorization. Note that self.head\nand self.tail point to valid values. Thus, the queue runs on\nthe interval [self.head, self.tail] inclusive. Adding and removing elements is\ndone without emptiness checking: the queue's tail and head wil always\nincrement on push or pop. When the queue is initialized or reinitialized via \nresizing, the tail is set to self.size-1 instead to\nconform to this protocol, potentially causing the tail to be\nnegative during part of the calculation.</p>\n"}, "game.game_queue.Queue.__init__": {"fullname": "game.game_queue.Queue.__init__", "modulename": "game.game_queue", "qualname": "Queue.__init__", "kind": "function", "doc": "<p>Initializes the queue with specified dimensions and capacity.</p>\n\n<p>Parameters:<br />\n    dim (int, optional): The dimension of the queue. Defaults to 2.<br />\n    init_capacity (int, optional): The initial capacity of the queue. Defaults to 50.<br />\n    copy (bool, optional): Whether the queue is initializing as a copy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dim</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">init_capacity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>, </span><span class=\"param\"><span class=\"n\">copy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "game.game_queue.Queue.capacity": {"fullname": "game.game_queue.Queue.capacity", "modulename": "game.game_queue", "qualname": "Queue.capacity", "kind": "variable", "doc": "<p></p>\n"}, "game.game_queue.Queue.dim": {"fullname": "game.game_queue.Queue.dim", "modulename": "game.game_queue", "qualname": "Queue.dim", "kind": "variable", "doc": "<p></p>\n"}, "game.game_queue.Queue.get_copy": {"fullname": "game.game_queue.Queue.get_copy", "modulename": "game.game_queue", "qualname": "Queue.get_copy", "kind": "function", "doc": "<p>Returns:<br />\n    Queue: A deep copy of the current queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">game_queue</span><span class=\"o\">.</span><span class=\"n\">Queue</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.push": {"fullname": "game.game_queue.Queue.push", "modulename": "game.game_queue", "qualname": "Queue.push", "kind": "function", "doc": "<p>Enqueues a value at the tail of the queue.</p>\n\n<p>Parameters:<br />\n    move (numpy.ndarray): The value to enqueue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.game_queue.Queue.peek_head": {"fullname": "game.game_queue.Queue.peek_head", "modulename": "game.game_queue", "qualname": "Queue.peek_head", "kind": "function", "doc": "<p>Retrieves the value at the head of the queue without removing it.</p>\n\n<p>Returns:<br />\n    np.array: The value at the head of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.peek_tail": {"fullname": "game.game_queue.Queue.peek_tail", "modulename": "game.game_queue", "qualname": "Queue.peek_tail", "kind": "function", "doc": "<p>Retrieves the value at the tail of the queue without removing it.</p>\n\n<p>Returns:<br />\n    np.array: The value at the tail of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.peek_all": {"fullname": "game.game_queue.Queue.peek_all", "modulename": "game.game_queue", "qualname": "Queue.peek_all", "kind": "function", "doc": "<p>Retrieves all values in the queue without removing them.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array containing all values in the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.peek_many_tail": {"fullname": "game.game_queue.Queue.peek_many_tail", "modulename": "game.game_queue", "qualname": "Queue.peek_many_tail", "kind": "function", "doc": "<p>Retrieves <code>num_moves</code> values starting from the tail and progressing toward the head, without removing them.\nReturns values in order starting with closest to head.</p>\n\n<p>Parameters:\n    num_moves (int): The number of values to retrieve from the tail toward the head.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A NumPy array containing the values starting from the tail and progressing toward the head.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_moves</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.peek_many_head": {"fullname": "game.game_queue.Queue.peek_many_head", "modulename": "game.game_queue", "qualname": "Queue.peek_many_head", "kind": "function", "doc": "<p>Retrieves <code>num_moves</code> values starting from the head and progressing toward the tail, without removing them.</p>\n\n<p>Parameters:<br />\n    num_moves (int): The number of values to retrieve from the head toward the tail.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A NumPy array containing the values starting from the head and progressing toward the tail.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_moves</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.push_many": {"fullname": "game.game_queue.Queue.push_many", "modulename": "game.game_queue", "qualname": "Queue.push_many", "kind": "function", "doc": "<p>Enqueues multiple values at the tail of the queue.</p>\n\n<p>Parameters:<br />\n    moves (numpy.ndarray): The values to enqueue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">moves</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.game_queue.Queue.pop": {"fullname": "game.game_queue.Queue.pop", "modulename": "game.game_queue", "qualname": "Queue.pop", "kind": "function", "doc": "<p>Removes and returns a value at the head of the queue.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The value removed from the head of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.pop_many": {"fullname": "game.game_queue.Queue.pop_many", "modulename": "game.game_queue", "qualname": "Queue.pop_many", "kind": "function", "doc": "<p>Removes and returns multiple values from the head of the queue.\nCredit to @Rupee for finding this bug</p>\n\n<p>Parameters:<br />\n    num_moves (int): The number of values to remove from the head of the queue.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: An array containing the values removed from the head of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_moves</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.game_queue.Queue.is_empty": {"fullname": "game.game_queue.Queue.is_empty", "modulename": "game.game_queue", "qualname": "Queue.is_empty", "kind": "function", "doc": "<p>Returns whether the queue is empty.</p>\n\n<p>Returns:<br />\n    bool: <code>True</code> if the queue is empty, <code>False</code> otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board": {"fullname": "game.player_board", "modulename": "game.player_board", "kind": "module", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard": {"fullname": "game.player_board.PlayerBoard", "modulename": "game.player_board", "qualname": "PlayerBoard", "kind": "class", "doc": "<p>A wrapper around the Board class to be able to call board and\nsnake functions from the player's perspective.</p>\n\n<p>Any coordinates should be given to the board in the form of x, y.\nGame objects are displayed, indexed, and stored on the \nboard arrays as arr[y, x] for geometrical accuracy. Mask functions return\narrays that should be indexed by [y, x].</p>\n\n<p>Check_validity is on by default for most functions, but slows\ndown execution. If a player is confident their actions are valid,\nthey can directly apply turns and moves with check_validity as false.</p>\n\n<p>Be wary that invalid actions/turns/function calls could lead to functions throwing\nerrors, so make sure to handle them with a try/except in case so that\nyour program doesn't crash. If an apply function throws an error,\nit is not guarenteed that the board state will be valid or that the state\nwill be the same as when the function started.</p>\n"}, "game.player_board.PlayerBoard.__init__": {"fullname": "game.player_board.PlayerBoard.__init__", "modulename": "game.player_board", "qualname": "PlayerBoard.__init__", "kind": "function", "doc": "<p>Parameters:<br />\n    is_player_a (bool): If True, the player is player A; if False, the player is player B.\n    game_board (Board): The game board object that holds the state of the current match.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">is_player_a</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">game_board</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">board</span><span class=\"o\">.</span><span class=\"n\">Board</span></span>)</span>"}, "game.player_board.PlayerBoard.game_board": {"fullname": "game.player_board.PlayerBoard.game_board", "modulename": "game.player_board", "qualname": "PlayerBoard.game_board", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.is_player_a": {"fullname": "game.player_board.PlayerBoard.is_player_a", "modulename": "game.player_board", "qualname": "PlayerBoard.is_player_a", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.player_snake": {"fullname": "game.player_board.PlayerBoard.player_snake", "modulename": "game.player_board", "qualname": "PlayerBoard.player_snake", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.enemy_snake": {"fullname": "game.player_board.PlayerBoard.enemy_snake", "modulename": "game.player_board", "qualname": "PlayerBoard.enemy_snake", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.player_cells": {"fullname": "game.player_board.PlayerBoard.player_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.player_cells", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.enemy_cells": {"fullname": "game.player_board.PlayerBoard.enemy_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.enemy_cells", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.player_trap_cells": {"fullname": "game.player_board.PlayerBoard.player_trap_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.player_trap_cells", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.enemy_trap_cells": {"fullname": "game.player_board.PlayerBoard.enemy_trap_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.enemy_trap_cells", "kind": "variable", "doc": "<p></p>\n"}, "game.player_board.PlayerBoard.get_last_turn": {"fullname": "game.player_board.PlayerBoard.get_last_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.get_last_turn", "kind": "function", "doc": "<p>Returns:\n    (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) last applied to the board.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_dim_x": {"fullname": "game.player_board.PlayerBoard.get_dim_x", "modulename": "game.player_board", "qualname": "PlayerBoard.get_dim_x", "kind": "function", "doc": "<p>Returns the x dimension of the board.</p>\n\n<p>Returns:<br />\n    (int): Width of the board.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_dim_y": {"fullname": "game.player_board.PlayerBoard.get_dim_y", "modulename": "game.player_board", "qualname": "PlayerBoard.get_dim_y", "kind": "function", "doc": "<p>Returns the y dimension of the board.</p>\n\n<p>Returns:<br />\n    (int): Height of the board.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_direction": {"fullname": "game.player_board.PlayerBoard.get_direction", "modulename": "game.player_board", "qualname": "PlayerBoard.get_direction", "kind": "function", "doc": "<p>Returns the direction of the snake</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the direction of the enemy snake. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    Action: The direction of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_valid_bid": {"fullname": "game.player_board.PlayerBoard.is_valid_bid", "modulename": "game.player_board", "qualname": "PlayerBoard.is_valid_bid", "kind": "function", "doc": "<p>Checks if a bid is valid.</p>\n\n<p>Parameters:<br />\n    bid (int): The bid amount to check.</p>\n\n<p>Returns:<br />\n    bool: True if the bid is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_bid": {"fullname": "game.player_board.PlayerBoard.apply_bid", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_bid", "kind": "function", "doc": "<p>Applies the bids to each snake.</p>\n\n<p>Parameters:<br />\n    my_bid (int): The bid made by the player.<br />\n    enemy_bid (int): The bid made by the enemy.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">enemy_bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.forecast_bid": {"fullname": "game.player_board.PlayerBoard.forecast_bid", "modulename": "game.player_board", "qualname": "PlayerBoard.forecast_bid", "kind": "function", "doc": "<p>Forecasts the result of a bid and predicts the new state of the game.</p>\n\n<p>Parameters:<br />\n    my_bid (int): The bid made by the player.<br />\n    enemy_bid (int): The bid made by the enemy.</p>\n\n<p>Returns:<br />\n    PlayerBoard: A copy of the game with the game state after the bids.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">enemy_bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_game_over": {"fullname": "game.player_board.PlayerBoard.is_game_over", "modulename": "game.player_board", "qualname": "PlayerBoard.is_game_over", "kind": "function", "doc": "<p>Checks if the game is over by determining if there is a winner. For internal use\n(not by players since winner is set by game runner.)</p>\n\n<p>Returns:<br />\n    bool: True if the game is over, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_min_player_size": {"fullname": "game.player_board.PlayerBoard.get_min_player_size", "modulename": "game.player_board", "qualname": "PlayerBoard.get_min_player_size", "kind": "function", "doc": "<p>Gets the minimum size below which a player cannot go.</p>\n\n<p>Returns:<br />\n    int: The minimum player size.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_current_apples": {"fullname": "game.player_board.PlayerBoard.get_current_apples", "modulename": "game.player_board", "qualname": "PlayerBoard.get_current_apples", "kind": "function", "doc": "<p>Returns an apple x 2 numpy array of apple coordinates currently on the board\nin (x, y) format.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A 2D array with each row representing the coordinates \n                of an apple in (x, y) format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_future_apples": {"fullname": "game.player_board.PlayerBoard.get_future_apples", "modulename": "game.player_board", "qualname": "PlayerBoard.get_future_apples", "kind": "function", "doc": "<p>Returns a list of 3-integer tuples representing the future apples on the board,\nwhere each tuple is in the format (spawn time, x, y).</p>\n\n<p>Returns:<br />\n    list: A list of tuples, each containing the (time, x, y) coordinates \n        for each future apple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_head_location": {"fullname": "game.player_board.PlayerBoard.get_head_location", "modulename": "game.player_board", "qualname": "PlayerBoard.get_head_location", "kind": "function", "doc": "<p>Returns the head location of the snake's head in the form of (x, y).</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the head location of the enemy's snake. \n                            Defaults to False, which returns the player's snake head location.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The (x, y) coordinates of the snake's head.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_tail_location": {"fullname": "game.player_board.PlayerBoard.get_tail_location", "modulename": "game.player_board", "qualname": "PlayerBoard.get_tail_location", "kind": "function", "doc": "<p>Returns the tail location of the snake in the form of (x, y).</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the tail location of the enemy's snake. \n                            Defaults to False, which returns the player's snake tail location.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The (x, y) coordinates of the snake's tail.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_head_cells": {"fullname": "game.player_board.PlayerBoard.get_head_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.get_head_cells", "kind": "function", "doc": "<p>Retrieves num_cells physically occupied positions from the head of the snake.</p>\n\n<p>Parameters:<br />\n    num_cells (int): The number of physically occupied cells from the head of the snake.<br />\n    enemy (bool, optional): If True, get the positions of the enemy snake's head; otherwise, for the player's snake.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array containing the positions of the head and the following cells of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_tail_cells": {"fullname": "game.player_board.PlayerBoard.get_tail_cells", "modulename": "game.player_board", "qualname": "PlayerBoard.get_tail_cells", "kind": "function", "doc": "<p>Retrieves num_cells physically occupied positions from the tail of the snake.</p>\n\n<p>Parameters:<br />\n    num_cells (int): The number of positions to retrieve from the tail of the snake.<br />\n    enemy (bool, optional): If True, get the positions of the enemy snake's tail; otherwise, for the player's snake.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array containing the positions of the tail and the preceding cells of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_all_locations": {"fullname": "game.player_board.PlayerBoard.get_all_locations", "modulename": "game.player_board", "qualname": "PlayerBoard.get_all_locations", "kind": "function", "doc": "<p>Returns all physically occupied locations of either the player's or the opponent's snake.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the locations of the enemy's snake. \n                            Defaults to False, which returns the player's snake locations.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array of length * 2 representing all locations of the snake as (x, y).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_length": {"fullname": "game.player_board.PlayerBoard.get_length", "modulename": "game.player_board", "qualname": "PlayerBoard.get_length", "kind": "function", "doc": "<p>Returns length of a snake</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the length of the enemy's snake. \n                            Defaults to False, which returns the player's snake length</p>\n\n<p>Returns:<br />\n    int: The length of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_unqueued_length": {"fullname": "game.player_board.PlayerBoard.get_unqueued_length", "modulename": "game.player_board", "qualname": "PlayerBoard.get_unqueued_length", "kind": "function", "doc": "<p>Returns the number of squares a snake physically occupies</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the length of the enemy's snake. \n                            Defaults to False, which returns the player's snake length</p>\n\n<p>Returns:<br />\n    int: Unqueued length of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_queued_length": {"fullname": "game.player_board.PlayerBoard.get_queued_length", "modulename": "game.player_board", "qualname": "PlayerBoard.get_queued_length", "kind": "function", "doc": "<p>Returns the amount of length a snake will accrue due to apples.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the length of the enemy's snake. \n                            Defaults to False, which returns the player's snake length</p>\n\n<p>Returns:<br />\n    int: Queued length of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_am_player_a": {"fullname": "game.player_board.PlayerBoard.get_am_player_a", "modulename": "game.player_board", "qualname": "PlayerBoard.get_am_player_a", "kind": "function", "doc": "<p>Returns if the calling player is player A or player B.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, checks if the current player is the enemy. \n                            Defaults to False, which checks for player A.</p>\n\n<p>Returns:<br />\n    bool: True if the calling player is player A, False if the calling player is player B.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_time_left": {"fullname": "game.player_board.PlayerBoard.get_time_left", "modulename": "game.player_board", "qualname": "PlayerBoard.get_time_left", "kind": "function", "doc": "<p>Returns the time left on the clock for a player.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, returns the time left for the opponent. Defaults to False, \n                            which returns the time left for the calling player.</p>\n\n<p>Returns:<br />\n    float: The time left on the clock for the specified player.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_possible_direction": {"fullname": "game.player_board.PlayerBoard.is_possible_direction", "modulename": "game.player_board", "qualname": "PlayerBoard.is_possible_direction", "kind": "function", "doc": "<p>Checks directions to move in given snake's current direction it is facing,\nnot accounting for board bounds or cell occupancy.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The direction to check.<br />\n    enemy (bool, optional): If True, checks for the opponent's snake. Defaults to False, \n                            which checks for the player's snake.</p>\n\n<p>Returns:<br />\n    bool: True if the direction is valid for the given snake, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_possible_move": {"fullname": "game.player_board.PlayerBoard.is_possible_move", "modulename": "game.player_board", "qualname": "PlayerBoard.is_possible_move", "kind": "function", "doc": "<p>Checks if the snake can make a move based on the specified action, sacrifice, and direction,\naccounting for board bound. Does not account for cell occupancy or length changes.\nfrom traps.</p>\n\n<p>Parameters:<br />\n    move (enums.Action): The direction to move (e.g., Action.NORTH, Action.SOUTH).<br />\n    sacrifice (int, optional): The sacrifice value to check. If not provided, the current sacrifice value is used.<br />\n    enemy (bool, optional): If True, checks for the opponent's snake. Defaults to False, which checks for the player's snake.</p>\n\n<p>Returns:<br />\n    bool: True if the snake can make the move based on the specified conditions, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_valid_action": {"fullname": "game.player_board.PlayerBoard.is_valid_action", "modulename": "game.player_board", "qualname": "PlayerBoard.is_valid_action", "kind": "function", "doc": "<p>Checks if the given action is valid for a player.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to validate (e.g., Action.NORTH, Action.SOUTH).<br />\n    enemy (bool, optional): If True, checks the validity for the opponent. Defaults to False.  </p>\n\n<p>Returns:<br />\n    bool: True if the action is valid for the player, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_valid_move": {"fullname": "game.player_board.PlayerBoard.is_valid_move", "modulename": "game.player_board", "qualname": "PlayerBoard.is_valid_move", "kind": "function", "doc": "<p>Checks if the given move is valid for the current player, accounting for the direction, sacrifice, and enemy.</p>\n\n<p>Parameters:<br />\n    move (enums.Action): The move to validate.<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. If not provided, the current sacrifice value is used.<br />\n    enemy (bool, optional): If True, checks the validity for the opponent. Defaults to False.</p>\n\n<p>Returns:<br />\n    bool: True if the move is valid for the player, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_valid_trap": {"fullname": "game.player_board.PlayerBoard.is_valid_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.is_valid_trap", "kind": "function", "doc": "<p>Returns whether the player can deploy a trap.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, checks the validity for the opponent. Defaults to False.</p>\n\n<p>Returns:<br />\n    bool: True if the player can apply a trap, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_valid_turn": {"fullname": "game.player_board.PlayerBoard.is_valid_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.is_valid_turn", "kind": "function", "doc": "<p>Returns if the given turn is a valid turn.\nA turn can be an Action or iterable of Actions. Actions can either be\nin the form of enums given in game.enums.Action or the ints to which the Action\nenum is mapped.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    enemy (bool, optional): If True, checks the validity for the opponent. Defaults to False.    </p>\n\n<p>Returns:<br />\n    bool: True if the turn is valid, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_loc_after_move": {"fullname": "game.player_board.PlayerBoard.get_loc_after_move", "modulename": "game.player_board", "qualname": "PlayerBoard.get_loc_after_move", "kind": "function", "doc": "<p>Simulates the location of the snake's head after the given action is applied.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to simulate (e.g., Action.NORTH, Action.SOUTH).<br />\n    enemy (bool, optional): If True, simulates the opponent's snake's head movement. Defaults to False, simulating the player's snake's head movement.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The simulated location of the snake's head after the move.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_possible_directions": {"fullname": "game.player_board.PlayerBoard.get_possible_directions", "modulename": "game.player_board", "qualname": "PlayerBoard.get_possible_directions", "kind": "function", "doc": "<p>Retrieves the possible directions the snake can move in, without considering the board state or cell occupancy.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, retrieves the possible directions for the opponent's snake. Defaults to False, retrieving for the player's snake.</p>\n\n<p>Returns:<br />\n    list: A list of valid directions (as Action enum values) that the snake can move in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_apples_eaten": {"fullname": "game.player_board.PlayerBoard.get_apples_eaten", "modulename": "game.player_board", "qualname": "PlayerBoard.get_apples_eaten", "kind": "function", "doc": "<p>Retrieves the number of apples eaten by the snake.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, retrieves the number of apples eaten by the opponent's snake. Defaults to False, retrieving for the player's snake.</p>\n\n<p>Returns:<br />\n    int: The number of apples eaten by the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.cell_in_bounds": {"fullname": "game.player_board.PlayerBoard.cell_in_bounds", "modulename": "game.player_board", "qualname": "PlayerBoard.cell_in_bounds", "kind": "function", "doc": "<p>Checks if the given location is within the bounds of the board.</p>\n\n<p>Parameters:<br />\n    loc (tuple or numpy.ndarray): The coordinates to check, represented as (x, y).</p>\n\n<p>Returns:<br />\n    bool: True if the location is within bounds, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"fullname": "game.player_board.PlayerBoard.cell_in_bounds_xy", "modulename": "game.player_board", "qualname": "PlayerBoard.cell_in_bounds_xy", "kind": "function", "doc": "<p>Checks if the given location is within the bounds of the board.</p>\n\n<p>Parameters:<br />\n    x (int): x coordinate to check<br />\n    y (int): y coordinate to check</p>\n\n<p>Returns:<br />\n    bool: True if the location is within bounds, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.try_move": {"fullname": "game.player_board.PlayerBoard.try_move", "modulename": "game.player_board", "qualname": "PlayerBoard.try_move", "kind": "function", "doc": "<p>Returns the tail cells that would be los in the event of a move\nas well as the new head location.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action representing the move to be made (e.g., Action.NORTH, Action.SOUTH).<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. If not provided, the current sacrifice value is used.<br />\n    enemy (bool, optional): If True, applies the move for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:\n        - numpy.ndarray: The new location of the snake's head.\n        - list: The cells that would be lost from the tail if the move is applied.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.try_trap": {"fullname": "game.player_board.PlayerBoard.try_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.try_trap", "kind": "function", "doc": "<p>Returns the cell at the tail of the snake, which would represent the trap.</p>\n\n<p>Parameters:<br />\n    enemy (bool, optional): If True, applies the trap for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The cell at the tail of the snake, which would represent the trap.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.try_action": {"fullname": "game.player_board.PlayerBoard.try_action", "modulename": "game.player_board", "qualname": "PlayerBoard.try_action", "kind": "function", "doc": "<p>Returns changes to the snake that would occur if an action performed.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to perform (e.g., Action.TRAP, Action.MOVE).<br />\n    enemy (bool, optional): If True, performs the action for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The resulting cell after performing the action (either the trap or the new position after move).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.try_sacrifice": {"fullname": "game.player_board.PlayerBoard.try_sacrifice", "modulename": "game.player_board", "qualname": "PlayerBoard.try_sacrifice", "kind": "function", "doc": "<p>Tries to apply a sacrifice (removal of cells from the snake's tail) for the player or the enemy.</p>\n\n<p>Parameters:<br />\n    sacrifice (int, optional): The amount of sacrifice. If not provided, the current sacrifice value is used.<br />\n    enemy (bool, optional): If True, applies the sacrifice for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    list: A list of cells that would be removed from the tail of the snake if the sacrifice is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_sacrifice": {"fullname": "game.player_board.PlayerBoard.apply_sacrifice", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_sacrifice", "kind": "function", "doc": "<p>Applies a sacrifice (removal of cells from the snake's tail) for the player or the enemy.  </p>\n\n<p>Parameters:<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. If not provided, the current sacrifice value is used.<br />\n    enemy (bool, optional): If True, applies the sacrifice for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    list: A list of cells that are removed from the tail of the snake after the sacrifice is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_action": {"fullname": "game.player_board.PlayerBoard.apply_action", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_action", "kind": "function", "doc": "<p>Performs an action, mutating the board.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to perform (e.g., Action.TRAP, Action.MOVE).<br />\n    enemy (bool, optional): If True, performs the action for the enemy. Defaults to False (for the current player).</p>\n\n<p>Returns:<br />\n    bool: If the action succeeded or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_trap": {"fullname": "game.player_board.PlayerBoard.apply_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_trap", "kind": "function", "doc": "<p>Deploys a trap for the current player, mutating the board.</p>\n\n<p>Parameters:<br />\n    check_validity (bool, optional): Whether to check the validity of the trap action. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the trap was applied successfully, False if the trap is invalid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_move": {"fullname": "game.player_board.PlayerBoard.apply_move", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_move", "kind": "function", "doc": "<p>Applies a move to the board, mutating the board.</p>\n\n<p>A move should be in the form of a direction. Actions can either be in the form of enums \nfrom game.enums.Action or the ints to which the Action enum is mapped.</p>\n\n<p>If check_validity is enabled, apply_move performs checks to ensure no errors. \nIf check_validity is disabled, the move is assumed to be valid and runs without additional checks.</p>\n\n<p>Parameters:<br />\n    move (enums.Action): The action representing the direction to move.<br />\n    sacrifice (int, optional): The amount of sacrifice applied to the move. Defaults to None.<br />\n    check_validity (bool, optional): Whether to perform checks for validity before applying the move. Defaults to True.</p>\n\n<p>Returns:<br />\n    bool: True if the move was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.apply_turn": {"fullname": "game.player_board.PlayerBoard.apply_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.apply_turn", "kind": "function", "doc": "<p>Applies a turn to the board, mutating the board, ending the current turn, and passing the move to the next player.</p>\n\n<p>A turn can be a direction or an iterable of directions. Actions can either be in the form of enums \nfrom game.enums.Action or the ints to which the Action enum is mapped.</p>\n\n<p>If check_validity is enabled, apply_turn performs checks to ensure no errors. If check_validity is \ndisabled, the turn is assumed to be valid and runs without additional checks.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    check_validity (bool, optional): Whether to perform checks for validity before applying the turn. Defaults to True.<br />\n    reverse (bool, optional): Reverses the perspective the board is seen from following application of the turn. Defaults to False.</p>\n\n<p>Returns:<br />\n    bool: True if the turn was applied successfully, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">turn</span>, </span><span class=\"param\"><span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.end_turn": {"fullname": "game.player_board.PlayerBoard.end_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.end_turn", "kind": "function", "doc": "<p>Ends the current turn and optionally reverses the board state.</p>\n\n<p>Parameters:<br />\n    reverse (bool, optional): Whether to reverse the board state after ending the turn. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.forecast_action": {"fullname": "game.player_board.PlayerBoard.forecast_action", "modulename": "game.player_board", "qualname": "PlayerBoard.forecast_action", "kind": "function", "doc": "<p>Simulates the application of an action (move or trap) on a copy\nof the current board and returns the resulting board state.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to forecast (e.g., move or trap).<br />\n    check_validity (bool, optional): Whether to check the validity of the action. Defaults to True.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - The board state after applying the action (as a copy of the current board).<br />\n        - A boolean indicating whether the action was successfully applied (True if successful, False if not).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.forecast_trap": {"fullname": "game.player_board.PlayerBoard.forecast_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.forecast_trap", "kind": "function", "doc": "<p>Simulates the application of a trap on a copy of the current board and returns the resulting board state.</p>\n\n<p>Parameters:<br />\n    check_validity (bool, optional): Whether to check the validity of the trap action. Defaults to True.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - The board state after applying the trap (as a copy of the current board).<br />\n        - A boolean indicating whether the trap was successfully applied (True if successful, False if not).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.forecast_move": {"fullname": "game.player_board.PlayerBoard.forecast_move", "modulename": "game.player_board", "qualname": "PlayerBoard.forecast_move", "kind": "function", "doc": "<p>Simulates the application of a move (with or without sacrifice) on a copy of the current board \nand returns the resulting board state.</p>\n\n<p>Parameters:<br />\n    move (enums.Action): The action representing the move to be made (e.g., Action.NORTH, Action.SOUTH).<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. Defaults to None.<br />\n    check_validity (bool, optional): Whether to check the validity of the move. Defaults to True.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - The board state after applying the move (as a copy of the current board).<br />\n        - A boolean indicating whether the move was successfully applied (True if successful, False if not).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">move</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.forecast_turn": {"fullname": "game.player_board.PlayerBoard.forecast_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.forecast_turn", "kind": "function", "doc": "<p>Simulates the application of a whole turn (multiple moves) on a copy of the current board and returns the resulting board state.</p>\n\n<p>Parameters:<br />\n    turn (enums.Action or Iterable[enums.Actions] or Iterable[int]): The action(s) the player takes in sequence.<br />\n    check_validity (bool, optional): Whether to check the validity of each action in the turn. Defaults to True.<br />\n    reverse (bool, optional): reverses the perspective the board is seen from following application of the turn. Defaults to False.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - The board state after applying the turn (as a copy of the current board).<br />\n        - A boolean indicating whether the turn was successfully applied (True if successful, False if not).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">turn</span>,</span><span class=\"param\">\t<span class=\"n\">check_validity</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.reverse_perspective": {"fullname": "game.player_board.PlayerBoard.reverse_perspective", "modulename": "game.player_board", "qualname": "PlayerBoard.reverse_perspective", "kind": "function", "doc": "<p>Reverses the perspective the board is seen from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_my_turn": {"fullname": "game.player_board.PlayerBoard.is_my_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.is_my_turn", "kind": "function", "doc": "<p>Returns whether it is the player's turn or not.</p>\n\n<p>Returns:<br />\n    bool: True if it's the player's turn, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_enemy_turn": {"fullname": "game.player_board.PlayerBoard.is_enemy_turn", "modulename": "game.player_board", "qualname": "PlayerBoard.is_enemy_turn", "kind": "function", "doc": "<p>Returns whether it is the enemy's turn or not.</p>\n\n<p>Returns:<br />\n    bool: True if it's the enemy's turn, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_copy": {"fullname": "game.player_board.PlayerBoard.get_copy", "modulename": "game.player_board", "qualname": "PlayerBoard.get_copy", "kind": "function", "doc": "<p>Returns a copy of this board.</p>\n\n<p>Returns:<br />\n    PlayerBoard: A new instance of PlayerBoard representing a copy of the current board.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">player_board</span><span class=\"o\">.</span><span class=\"n\">PlayerBoard</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_occupied": {"fullname": "game.player_board.PlayerBoard.is_occupied", "modulename": "game.player_board", "qualname": "PlayerBoard.is_occupied", "kind": "function", "doc": "<p>Returns whether the cell at (x, y) is occupied or not.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the cell to check.<br />\n    y (int): The y-coordinate of the cell to check.</p>\n\n<p>Returns:<br />\n    bool: True if the cell is occupied, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_my_trap_life": {"fullname": "game.player_board.PlayerBoard.get_my_trap_life", "modulename": "game.player_board", "qualname": "PlayerBoard.get_my_trap_life", "kind": "function", "doc": "<p>Returns the remaining life of the player's trap at the specified coordinates.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the trap.<br />\n    y (int): The y-coordinate of the trap.</p>\n\n<p>Returns:<br />\n    int: The remaining life of the player's trap at the given coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"fullname": "game.player_board.PlayerBoard.get_enemy_trap_life", "modulename": "game.player_board", "qualname": "PlayerBoard.get_enemy_trap_life", "kind": "function", "doc": "<p>Returns the remaining life of the enemy's trap at the specified coordinates.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the trap.<br />\n    y (int): The y-coordinate of the trap.  </p>\n\n<p>Returns:<br />\n    int: The remaining life of the enemy's trap at the given coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.has_my_trap": {"fullname": "game.player_board.PlayerBoard.has_my_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.has_my_trap", "kind": "function", "doc": "<p>Checks if the player has a trap at the specified coordinates.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate to check for a player's trap.<br />\n    y (int): The y-coordinate to check for a player's trap.</p>\n\n<p>Returns:<br />\n    bool: True if the player has a trap at the given coordinates, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.has_enemy_trap": {"fullname": "game.player_board.PlayerBoard.has_enemy_trap", "modulename": "game.player_board", "qualname": "PlayerBoard.has_enemy_trap", "kind": "function", "doc": "<p>Checks if the enemy has a trap at the specified coordinates.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate to check for the enemy's trap.<br />\n    y (int): The y-coordinate to check for the enemy's trap.  </p>\n\n<p>Returns:<br />\n    bool: True if the enemy has a trap at the given coordinates, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.has_apple": {"fullname": "game.player_board.PlayerBoard.has_apple", "modulename": "game.player_board", "qualname": "PlayerBoard.has_apple", "kind": "function", "doc": "<p>Returns whether the specified cell contains an apple.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the cell to check.<br />\n    y (int): The y-coordinate of the cell to check.  </p>\n\n<p>Returns:<br />\n    bool: True if the cell contains an apple, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_snake_mask": {"fullname": "game.player_board.PlayerBoard.get_snake_mask", "modulename": "game.player_board", "qualname": "PlayerBoard.get_snake_mask", "kind": "function", "doc": "<p>Returns a map-sized array with cells occupied by the player's snake\nand/or the enemy's snake as specified in arguments. Players' snakes' heads and\nbodies are denoted by their relevant enums.Cell enum values.</p>\n\n<p>Parameters:<br />\n    my_snake (bool, optional): If True, includes the player's snake. Defaults to True.<br />\n    enemy_snake (bool, optional): If True, includes the enemy's snake. Defaults to False.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A 2D numpy array with the snake's body and head marked according to the enums.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_snake</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">enemy_snake</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_trap_mask": {"fullname": "game.player_board.PlayerBoard.get_trap_mask", "modulename": "game.player_board", "qualname": "PlayerBoard.get_trap_mask", "kind": "function", "doc": "<p>Returns a mask representing the lifetime of traps for the player and the enemy.\nPositive values represent the player's trap lifetime, and negative values represent\nthe enemy's trap lifetime.</p>\n\n<p>Parameters:<br />\n    my_traps (bool, optional): If True, includes the player's traps. Defaults to True.<br />\n    enemy_traps (bool, optional): If True, includes the enemy's traps. Defaults to False.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A 2D numpy array where positive values correspond to the player's trap lifetime\n                and negative values correspond to the enemy's trap lifetime.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_traps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">enemy_traps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"fullname": "game.player_board.PlayerBoard.get_trap_mask_enemy", "modulename": "game.player_board", "qualname": "PlayerBoard.get_trap_mask_enemy", "kind": "function", "doc": "<p>Returns a mask representing the lifetime of enemy traps and the player's traps.\nPositive values represent the enemy's trap lifetime, and negative values represent\nthe player's trap lifetime.</p>\n\n<p>Parameters:<br />\n    my_traps (bool, optional): If True, includes the player's traps. Defaults to False.<br />\n    enemy_traps (bool, optional): If True, includes the enemy's traps. Defaults to True.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A 2D numpy array where positive values correspond to the enemy's trap lifetime\n                and negative values correspond to the player's trap lifetime.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">my_traps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">enemy_traps</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_wall_mask": {"fullname": "game.player_board.PlayerBoard.get_wall_mask", "modulename": "game.player_board", "qualname": "PlayerBoard.get_wall_mask", "kind": "function", "doc": "<p>Returns a map-sized array with only walls, represented by their enum (1).</p>\n\n<p>Returns:\n    numpy.ndarray: A 2D numpy array where cells containing walls are represented by the enum value (1).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_portal_mask": {"fullname": "game.player_board.PlayerBoard.get_portal_mask", "modulename": "game.player_board", "qualname": "PlayerBoard.get_portal_mask", "kind": "function", "doc": "<p>Returns a map-sized array with portals. If descriptive is marked as True, returns \nnon-portal locations as (-1, -1) and portal locations in the form of a 2-dim coordinate\nin the form (destination_x, destination_y) at mask[y, x]. Otherwise, returns 0/1\nmask of if coordinates are portals or not.</p>\n\n<p>Parameters:<br />\ndescriptive (bool, optional): If True, the function will return a detailed mask with portal coordinates\n                     (destination_x, destination_y) for portal locations and -1 for non-portal locations.\n                     If False, it returns a binary mask where 1 indicates portal locations and 0 indicates non-portal locations.\n                     Default is False.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array of the same size as the map, where each entry corresponds to the portal at \n    that location on the map.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">descriptive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_portal_dest": {"fullname": "game.player_board.PlayerBoard.get_portal_dest", "modulename": "game.player_board", "qualname": "PlayerBoard.get_portal_dest", "kind": "function", "doc": "<p>Returns the destination portal of the source portal given by coordinates (x, y) on the game board.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the portal.<br />\n    y (int): The y-coordinate of the portal.</p>\n\n<p>Returns:<br />\n    np.ndarray: The portal destination at the specified portal (x, y) on the game board. Returns (-1, -1) for an\n                invalid cell.\n                The value represents the destination of the portal in the form of (x, y) coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.is_portal": {"fullname": "game.player_board.PlayerBoard.is_portal", "modulename": "game.player_board", "qualname": "PlayerBoard.is_portal", "kind": "function", "doc": "<p>Checks whether the given coordinates (x, y) represent a portal on the game board.</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate on the game board.<br />\n    y (int): The y-coordinate on the game board.</p>\n\n<p>Returns:<br />\n    bool: True if the coordinates (x, y) represent a portal, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_portal_dict": {"fullname": "game.player_board.PlayerBoard.get_portal_dict", "modulename": "game.player_board", "qualname": "PlayerBoard.get_portal_dict", "kind": "function", "doc": "<p>Returns a dictionary mapping pairs of portals together (each) pair of portals appears\ntwice in this dict, one once as the key tuple and once as the value tuple.</p>\n\n<p>Returns:<br />\n    dict: A dictionary where the keys and values are tuples representing the coordinates of the portals\n        and their respective destination coordinates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_apple_mask": {"fullname": "game.player_board.PlayerBoard.get_apple_mask", "modulename": "game.player_board", "qualname": "PlayerBoard.get_apple_mask", "kind": "function", "doc": "<p>Returns a map-sized array with only apples, represented by their enum (2).</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A 2D numpy array where cells containing apples are represented by the enum value (2).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_turn_count": {"fullname": "game.player_board.PlayerBoard.get_turn_count", "modulename": "game.player_board", "qualname": "PlayerBoard.get_turn_count", "kind": "function", "doc": "<p>Returns the current turn count of the game.</p>\n\n<p>Returns:<br />\n    int: The current number of turns that have passed in the game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_traps_until_limit": {"fullname": "game.player_board.PlayerBoard.get_traps_until_limit", "modulename": "game.player_board", "qualname": "PlayerBoard.get_traps_until_limit", "kind": "function", "doc": "<p>Returns the number of traps the player can still deploy on this turn until they reach\nthe limiting number of traps.</p>\n\n<p>Parameters:<br />\n    enemy (bool): If True, the function returns the number of traps remaining for the enemy.\n                If False, it returns the number of traps remaining for the player. Default is False.</p>\n\n<p>Returns:<br />\n    int: The number of remaining traps the player (or enemy, if <code>enemy</code> is True) can still play \n        until they reach the trap limit for the turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_traps_placed": {"fullname": "game.player_board.PlayerBoard.get_traps_placed", "modulename": "game.player_board", "qualname": "PlayerBoard.get_traps_placed", "kind": "function", "doc": "<p>Returns the number of traps that have been placed on this turn by the player (or enemy, if <code>enemy</code> is True.</p>\n\n<p>Parameters:<br />\n    enemy (bool): If True, the function returns the number of traps placed by the enemy. \n                If False, it returns the number of traps placed by the player. Default is False.</p>\n\n<p>Returns:<br />\n    int: The number of traps placed by the player or the enemy this turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_traps_limit": {"fullname": "game.player_board.PlayerBoard.get_traps_limit", "modulename": "game.player_board", "qualname": "PlayerBoard.get_traps_limit", "kind": "function", "doc": "<p>Returns the maximum number of traps that the player (or enemy, if <code>enemy</code> is True) can place on a turn.</p>\n\n<p>Parameters:<br />\n    enemy (bool): If True, the function returns the maximum number of traps the enemy can place.\n                If False, it returns the maximum number of traps the player can place. Default is False.</p>\n\n<p>Returns:<br />\n    int: The maximum number of traps the player or the enemy can place this turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_max_length": {"fullname": "game.player_board.PlayerBoard.get_max_length", "modulename": "game.player_board", "qualname": "PlayerBoard.get_max_length", "kind": "function", "doc": "<p>Returns the maximum length the player (or enemy, if <code>enemy</code> is True) has achieved this game.</p>\n\n<p>Parameters:<br />\n    enemy (bool): If True, the function returns the maximum length for the enemy. \n                If False, it returns the maximum length for the player. Default is False.</p>\n\n<p>Returns:<br />\n    int: The maximum length the player or the enemy has achieved has achieved this game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enemy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.cell_occupied_by": {"fullname": "game.player_board.PlayerBoard.cell_occupied_by", "modulename": "game.player_board", "qualname": "PlayerBoard.cell_occupied_by", "kind": "function", "doc": "<p>Returns the relevant enum for what a cell is currently occupied by (excluding apples).</p>\n\n<p>Parameters:<br />\n    x (int): The x-coordinate of the cell.<br />\n    y (int): The y-coordinate of the cell.</p>\n\n<p>Returns:<br />\n    enums.Cell: The enum representing what occupies the cell (e.g., WALL, PLAYER_HEAD, PLAYER_BODY, SPACE).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Cell</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.currently_decaying": {"fullname": "game.player_board.PlayerBoard.currently_decaying", "modulename": "game.player_board", "qualname": "PlayerBoard.currently_decaying", "kind": "function", "doc": "<p>Returns whether snakes will decay at the beginning\nof this turn.</p>\n\n<p>Returns:<br />\n    bool: If snakes will decay at the beginning of this turn.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_current_decay_interval": {"fullname": "game.player_board.PlayerBoard.get_current_decay_interval", "modulename": "game.player_board", "qualname": "PlayerBoard.get_current_decay_interval", "kind": "function", "doc": "<p>Returns the current decay interval from the game board. Returns -1 if decays have not begun yet.</p>\n\n<p>Returns:<br />\n    int: The current decay interval value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"fullname": "game.player_board.PlayerBoard.get_future_decay_intervals", "modulename": "game.player_board", "qualname": "PlayerBoard.get_future_decay_intervals", "kind": "function", "doc": "<p>Returns a list of future decay intervals from the decay timeline.</p>\n\n<p>Returns:<br />\n    list: A list of tuples representing future decay intervals in (start turn, interval) format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_next_decay_interval": {"fullname": "game.player_board.PlayerBoard.get_next_decay_interval", "modulename": "game.player_board", "qualname": "PlayerBoard.get_next_decay_interval", "kind": "function", "doc": "<p>Returns a the next decay interval after the current one. Returns the current\none if current is already the last decay interval.</p>\n\n<p>Returns:<br />\n    tuple: Tuple representing next decay interval in (start turn, interval) format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.player_board.PlayerBoard.get_next_decay_event": {"fullname": "game.player_board.PlayerBoard.get_next_decay_event", "modulename": "game.player_board", "qualname": "PlayerBoard.get_next_decay_event", "kind": "function", "doc": "<p>Returns the turns until thse next decay event.</p>\n\n<p>Returns:<br />\n    int: Returns the number of turns until the next turn that snakes will start decaying at.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake": {"fullname": "game.snake", "modulename": "game.snake", "kind": "module", "doc": "<p></p>\n"}, "game.snake.Snake": {"fullname": "game.snake.Snake", "modulename": "game.snake", "qualname": "Snake", "kind": "class", "doc": "<p>This class represents a snake. It is built as a wrapper\naround the numpy-vectorized queue <code>game.game_queue</code>.</p>\n"}, "game.snake.Snake.__init__": {"fullname": "game.snake.Snake.__init__", "modulename": "game.snake", "qualname": "Snake.__init__", "kind": "function", "doc": "<p>Initializes the Snake object with the minimum player size and copy flag.</p>\n\n<p>Parameters:<br />\n    min_player_size (int, optional): The minimum size of the snake. Defaults to 2.<br />\n    copy (bool, optional): Whether to initialize the snake as a copy. Defaults to False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">min_player_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">copy</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "game.snake.Snake.min_player_size": {"fullname": "game.snake.Snake.min_player_size", "modulename": "game.snake", "qualname": "Snake.min_player_size", "kind": "variable", "doc": "<p></p>\n"}, "game.snake.Snake.get_max_traps": {"fullname": "game.snake.Snake.get_max_traps", "modulename": "game.snake", "qualname": "Snake.get_max_traps", "kind": "function", "doc": "<p>Returns the maximum number of traps that can be placed based on the maximum length of the snake.</p>\n\n<p>Returns:<br />\n    int: The maximum number of traps that can be placed. This value is determined by dividing \n        the maximum length achieved by 2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.start": {"fullname": "game.snake.Snake.start", "modulename": "game.snake", "qualname": "Snake.start", "kind": "function", "doc": "<p>Initializes the snake to the starting position and size.</p>\n\n<p>Parameters:<br />\n    start_loc (numpy.ndarray): A NumPy array representing the starting location of the snake.\n    start_size (int): The initial size of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_loc</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">start_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.get_lengthen_coef": {"fullname": "game.snake.Snake.get_lengthen_coef", "modulename": "game.snake", "qualname": "Snake.get_lengthen_coef", "kind": "function", "doc": "<p>Returns the coefficient by which the snake lengthens when it eats an apple.</p>\n\n<p>Returns:<br />\n    int: The amount by which the snake lengthens when it eats an apple.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.increment_sacrifice": {"fullname": "game.snake.Snake.increment_sacrifice", "modulename": "game.snake", "qualname": "Snake.increment_sacrifice", "kind": "function", "doc": "<p>Increments the sacrifice necessary for a move by 2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.reset": {"fullname": "game.snake.Snake.reset", "modulename": "game.snake", "qualname": "Snake.reset", "kind": "function", "doc": "<p>Resets the sacrifice for a move to 1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.get_head_loc": {"fullname": "game.snake.Snake.get_head_loc", "modulename": "game.snake", "qualname": "Snake.get_head_loc", "kind": "function", "doc": "<p>Retrieves the location of the head of the snake as a (x, y) coordinate.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array representing the location of the head of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_tail_loc": {"fullname": "game.snake.Snake.get_tail_loc", "modulename": "game.snake", "qualname": "Snake.get_tail_loc", "kind": "function", "doc": "<p>Retrieves the location of the tail of the snake as a (x, y) coordinate.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array representing the location of the tail of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_all_loc": {"fullname": "game.snake.Snake.get_all_loc", "modulename": "game.snake", "qualname": "Snake.get_all_loc", "kind": "function", "doc": "<p>Retrieves the locations of all parts of the snake as an array of (x, y) coordinates.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: A numpy array containing the locations of all parts of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_direction": {"fullname": "game.snake.Snake.get_direction", "modulename": "game.snake", "qualname": "Snake.get_direction", "kind": "function", "doc": "<p>Retrieves the current direction of the snake.</p>\n\n<p>Returns:<br />\n    Action: An Action enum value representing the current direction of the snake (e.g., Action.NORTH, Action.SOUTH).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_unqueued_length": {"fullname": "game.snake.Snake.get_unqueued_length", "modulename": "game.snake", "qualname": "Snake.get_unqueued_length", "kind": "function", "doc": "<p>Retrieves the current physical length of the snake (discounts queued length)</p>\n\n<p>Returns:<br />\n    int: The physical length of the snake</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_length": {"fullname": "game.snake.Snake.get_length", "modulename": "game.snake", "qualname": "Snake.get_length", "kind": "function", "doc": "<p>Retrieves the current total length of the snake, including any pending length from apples eaten.</p>\n\n<p>Returns:<br />\n    int: The total length of the snake, including any length gained from eating apples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_next_loc": {"fullname": "game.snake.Snake.get_next_loc", "modulename": "game.snake", "qualname": "Snake.get_next_loc", "kind": "function", "doc": "<p>Simulates the location of the snake's head if the given action is taken.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to simulate (e.g., Action.NORTH, Action.SOUTH).<br />\n    head_loc (numpy.ndarray, optional): The current location of the snake's head to simulate the movement from. If not provided, the current head location is used.</p>\n\n<p>Returns:<br />\n    - numpy.ndarray: The simulated location of the snake's head after taking the action.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>, </span><span class=\"param\"><span class=\"n\">head_loc</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.is_valid_bid": {"fullname": "game.snake.Snake.is_valid_bid", "modulename": "game.snake", "qualname": "Snake.is_valid_bid", "kind": "function", "doc": "<p>Checks if a bid is valid for the snake based on its current length.</p>\n\n<p>Parameters:<br />\n    bid (int): The bid to be validated.</p>\n\n<p>Returns:<br />\n    bool: True if the bid is valid (i.e., the snake's length minus the bid is greater than or equal to the minimum player size), otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.is_valid_trap": {"fullname": "game.snake.Snake.is_valid_trap", "modulename": "game.snake", "qualname": "Snake.is_valid_trap", "kind": "function", "doc": "<p>Checks if the snake can trap based on length and unqueued length.</p>\n\n<p>Parameters:<br />\n    length (int, optional): The current length of the snake. If not provided, the current length is used.<br />\n    unqueued (int, optional): The unqueued length of the snake. If not provided, the current unqueued length is used.</p>\n\n<p>Returns:<br />\n    bool: True if the snake can trap (i.e., unqueued length is greater than 1 and total length is greater than the minimum player size), otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">unqueued</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">traps_placed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_traps</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.is_valid_direction": {"fullname": "game.snake.Snake.is_valid_direction", "modulename": "game.snake", "qualname": "Snake.is_valid_direction", "kind": "function", "doc": "<p>Checks if a given action is a valid direction based on the current direction of the snake.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action to be validated (e.g., Action.NORTH, Action.SOUTH).<br />\n    direction (enums.Action, optional): The current direction of the snake. If not provided, the current direction is used.</p>\n\n<p>Returns:<br />\n    bool: True if the action is a valid direction to move (i.e., not opposite or invalid relative to the current direction), otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.is_valid_sacrifice": {"fullname": "game.snake.Snake.is_valid_sacrifice", "modulename": "game.snake", "qualname": "Snake.is_valid_sacrifice", "kind": "function", "doc": "<p>Checks if the snake can perform a sacrifice based on its length and the specified sacrifice value.</p>\n\n<p>Parameters:<br />\n    sacrifice (int, optional): The value representing the sacrifice. If not provided, it defaults to None.<br />\n    length (int, optional): The current length of the snake. If not provided, the current length is used.</p>\n\n<p>Returns:<br />\n    bool: If the sacrifice is valid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.can_move": {"fullname": "game.snake.Snake.can_move", "modulename": "game.snake", "qualname": "Snake.can_move", "kind": "function", "doc": "<p>Checks if the snake can make a move based on the specified action, sacrifice, and direction.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action representing the move to be made (e.g., Action.NORTH, Action.SOUTH).<br />\n    sacrifice (int, optional): The sacrifice value to check. If not provided, the current sacrifice value is used.<br />\n    direction (enums.Action, optional): The current direction of the snake. If not provided, the current direction is used.<br />\n    length (int, optional): The current length of the snake. If not provided, the current length is used.</p>\n\n<p>Returns:<br />\n    bool: True if the move is valid (i.e., the sacrifice is within acceptable limits, and the direction is not invalid), otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_valid_directions": {"fullname": "game.snake.Snake.get_valid_directions", "modulename": "game.snake", "qualname": "Snake.get_valid_directions", "kind": "function", "doc": "<p>Retrieves the possible directions the snake can move in, without considering the board state.  </p>\n\n<p>Parameters:<br />\n    direction (Action, optional): The current direction of the snake. If not provided, the current direction is used.</p>\n\n<p>Returns:<br />\n    list: A list of valid directions (as Action enum values) that the snake can move in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">direction</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.eat_apple": {"fullname": "game.snake.Snake.eat_apple", "modulename": "game.snake", "qualname": "Snake.eat_apple", "kind": "function", "doc": "<p>Simulate eating an apple, queuing length and modifying max length achieved as necessary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.get_apples_eaten": {"fullname": "game.snake.Snake.get_apples_eaten", "modulename": "game.snake", "qualname": "Snake.get_apples_eaten", "kind": "function", "doc": "<p>Retrieves the total number of apples the snake has eaten.</p>\n\n<p>Returns:<br />\n    int: The total number of apples eaten by the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.apply_bid": {"fullname": "game.snake.Snake.apply_bid", "modulename": "game.snake", "qualname": "Snake.apply_bid", "kind": "function", "doc": "<p>Decreases the snake's length by the specified bid amount for the first turn.</p>\n\n<p>Parameters:<br />\n    bid (int): The amount by which the snake's length will be decreased.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bid</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.get_last_cells": {"fullname": "game.snake.Snake.get_last_cells", "modulename": "game.snake", "qualname": "Snake.get_last_cells", "kind": "function", "doc": "<p>Retrieves the last <code>num_cells</code> cells from the tail side of the snake.</p>\n\n<p>Parameters:<br />\n    num_cells (int, optional): The number of tail-side cells to retrieve. Defaults to 1.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: a numpy array representing the  last cells of the snake as num_cells (x, y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_first_cells": {"fullname": "game.snake.Snake.get_first_cells", "modulename": "game.snake", "qualname": "Snake.get_first_cells", "kind": "function", "doc": "<p>Retrieves the first <code>num_cells</code> cells from the head side of the snake.</p>\n\n<p>Parameters:<br />\n    num_cells (int, optional): The number of head-side cells to retrieve. Defaults to 1.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: a numpy array representing the first cells of a the snake as num_cells (x, y)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.try_sacrifice": {"fullname": "game.snake.Snake.try_sacrifice", "modulename": "game.snake", "qualname": "Snake.try_sacrifice", "kind": "function", "doc": "<p>Returns the cells that would be removed from the tail of the snake if a sacrifice is applied.</p>\n\n<p>Parameters:<br />\n    sacrifice (int, optional): The amount of sacrifice. If not provided, the current sacrifice value is used.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: An array of cells that would be removed from the tail of the snake if the sacrifice is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.apply_sacrifice": {"fullname": "game.snake.Snake.apply_sacrifice", "modulename": "game.snake", "qualname": "Snake.apply_sacrifice", "kind": "function", "doc": "<p>Applies the sacrifice to the snake and returns the cells to be removed from the tail.</p>\n\n<p>Parameters:<br />\n    sacrifice (int, optional): The amount of sacrifice to apply. If not provided, the current sacrifice value is used.</p>\n\n<p>Returns:<br />\n    list: A list of cells that are removed from the tail of the snake after the sacrifice is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.apply_head_move": {"fullname": "game.snake.Snake.apply_head_move", "modulename": "game.snake", "qualname": "Snake.apply_head_move", "kind": "function", "doc": "<p>Moves the head to the next location according to the action taken and updates the direction.</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action representing the direction in which the snake's head should move.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The new location of the snake's head after the move.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.try_trap": {"fullname": "game.snake.Snake.try_trap", "modulename": "game.snake", "qualname": "Snake.try_trap", "kind": "function", "doc": "<p>Returns the cell at the tail of the snake, which would represent the trap.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The cell at the tail of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.try_move": {"fullname": "game.snake.Snake.try_move", "modulename": "game.snake", "qualname": "Snake.try_move", "kind": "function", "doc": "<p>Simulates the move and returns the tail cells that would be lost, \nas well as the new head location.</p>\n\n<p>Parameters:\n    action (enums.Action): The action representing the direction the snake will move.<br />\n    sacrifice (int, optional): The amount of sacrifice. Defaults to the current sacrifice value if not provided.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - numpy.ndarray: The new location of the snake's head.<br />\n        - list: The cells that would be lost from the tail if the move is applied.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.push_trap": {"fullname": "game.snake.Snake.push_trap", "modulename": "game.snake", "qualname": "Snake.push_trap", "kind": "function", "doc": "<p>Removes and returns the cell at the tail of the snake, representing the trap created.</p>\n\n<p>Returns:<br />\n    numpy.ndarray: The cell at the tail of the snake.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.push_head_cell": {"fullname": "game.snake.Snake.push_head_cell", "modulename": "game.snake", "qualname": "Snake.push_head_cell", "kind": "function", "doc": "<p>Enqueues the snake's new head location into the internal queue.</p>\n\n<p>Parameters:<br />\n    loc (numpy.ndarray): The head location to enqueue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loc</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "game.snake.Snake.push_move": {"fullname": "game.snake.Snake.push_move", "modulename": "game.snake", "qualname": "Snake.push_move", "kind": "function", "doc": "<p>Applies the move and returns the tail cells that would be lost, \nas well as the new head location. Does not enqueue the new location (could potentially require portal transformation).</p>\n\n<p>Parameters:<br />\n    action (enums.Action): The action representing the direction the snake will move.<br />\n    sacrifice (int, optional): The amount of sacrifice. Defaults to the current sacrifice value if not provided.</p>\n\n<p>Returns:<br />\n    tuple: A tuple containing:<br />\n        - numpy.ndarray: The new location of the snake's head.<br />\n        - list: The cells that would be lost from the tail if the move is applied.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">enums</span><span class=\"o\">.</span><span class=\"n\">Action</span>,</span><span class=\"param\">\t<span class=\"n\">sacrifice</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "game.snake.Snake.get_copy": {"fullname": "game.snake.Snake.get_copy", "modulename": "game.snake", "qualname": "Snake.get_copy", "kind": "function", "doc": "<p>Return a deep copy of the snake.</p>\n\n<p>Returns:<br />\n    Snake: A deep copy of the current snake object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">game</span><span class=\"o\">.</span><span class=\"n\">snake</span><span class=\"o\">.</span><span class=\"n\">Snake</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"game": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 733}, "game.board": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.board.Board": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 148}, "game.board.Board.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 86}, "game.board.Board.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.board.Board.set_errlog": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "game.board.Board.is_as_turn": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 15}, "game.board.Board.get_a_time": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 17}, "game.board.Board.get_b_time": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 17}, "game.board.Board.has_apple_tuple": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 60}, "game.board.Board.has_apple": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 62}, "game.board.Board.tiebreak": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 26}, "game.board.Board.set_build_history": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 35}, "game.board.Board.set_winner": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 40}, "game.board.Board.get_winner": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 21}, "game.board.Board.get_win_reason": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "game.board.Board.get_history_json": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 17}, "game.board.Board.is_valid_bid": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 38}, "game.board.Board.resolve_bid": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 56}, "game.board.Board.get_bid_resolved": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 29}, "game.board.Board.is_valid_trap": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 54}, "game.board.Board.is_valid_action": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 91}, "game.board.Board.is_valid_move": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 103}, "game.board.Board.is_valid_turn": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 104}, "game.board.Board.is_valid_cell": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 63}, "game.board.Board.is_valid_cell_copy": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 43}, "game.board.Board.cell_in_bounds": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 55}, "game.board.Board.apply_decay": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 71}, "game.board.Board.increment_decay": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 51}, "game.board.Board.apply_turn": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 176}, "game.board.Board.check_turn_start": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 44}, "game.board.Board.apply_trap": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 73}, "game.board.Board.increment_traps": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "game.board.Board.resolve_square": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 76, "bases": 0, "doc": 122}, "game.board.Board.apply_move": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 171}, "game.board.Board.next_turn": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "game.board.Board.spawn_apples": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 10}, "game.board.Board.get_history": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 22}, "game.board.Board.get_map_generated": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 26}, "game.board.Board.get_copy": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 48}, "game.board.Board.forecast_trap": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 70}, "game.board.Board.forecast_move": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 95, "bases": 0, "doc": 95}, "game.board.Board.forecast_turn": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 91}, "game.board.Board.get_board_string": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 170}, "game.enums": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Result": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "game.enums.Result.PLAYER_A": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Result.PLAYER_B": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Result.TIE": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Result.ERROR": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "game.enums.Action.NORTH": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.NORTHEAST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.EAST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.SOUTHEAST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.SOUTH": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.SOUTHWEST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.WEST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.NORTHWEST": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.TRAP": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Action.FF": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "game.enums.Cell.SPACE": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.WALL": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.APPLE": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 7, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.PLAYER_HEAD": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.PLAYER_BODY": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.ENEMY_HEAD": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.enums.Cell.ENEMY_BODY": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 8, "signature": 0, "bases": 0, "doc": 3}, "game.game_map": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 23}, "game.game_map.Map.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 3}, "game.game_map.Map.decay_timeline": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.trap_timeout": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.map_string": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.trap_sacrifice": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.infos": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.dim_x": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.dim_y": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.start_a": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.start_b": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.start_size": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.min_player_size": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.is_record": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.cells_walls": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.max_turns": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.portal_dict": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.cells_portals": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_map.Map.add_apple_spawns": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 30}, "game.game_map.Map.get_recorded_map": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 14}, "game.game_map.Map.reflect": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 13}, "game.game_queue": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_queue.Queue": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 98}, "game.game_queue.Queue.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 58}, "game.game_queue.Queue.capacity": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_queue.Queue.dim": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.game_queue.Queue.get_copy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 13}, "game.game_queue.Queue.push": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 25}, "game.game_queue.Queue.peek_head": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 30}, "game.game_queue.Queue.peek_tail": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 30}, "game.game_queue.Queue.peek_all": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 28}, "game.game_queue.Queue.peek_many_tail": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 72}, "game.game_queue.Queue.peek_many_head": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 64}, "game.game_queue.Queue.push_many": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 25}, "game.game_queue.Queue.pop": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 30}, "game.game_queue.Queue.pop_many": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 60}, "game.game_queue.Queue.is_empty": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 27}, "game.player_board": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 169}, "game.player_board.PlayerBoard.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 40}, "game.player_board.PlayerBoard.game_board": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.is_player_a": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.player_snake": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.enemy_snake": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.player_cells": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.enemy_cells": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.player_trap_cells": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.enemy_trap_cells": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.player_board.PlayerBoard.get_last_turn": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "game.player_board.PlayerBoard.get_dim_x": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 21}, "game.player_board.PlayerBoard.get_dim_y": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 21}, "game.player_board.PlayerBoard.get_direction": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 44}, "game.player_board.PlayerBoard.is_valid_bid": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 36}, "game.player_board.PlayerBoard.apply_bid": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 36}, "game.player_board.PlayerBoard.forecast_bid": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 62}, "game.player_board.PlayerBoard.is_game_over": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 43}, "game.player_board.PlayerBoard.get_min_player_size": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 23}, "game.player_board.PlayerBoard.get_current_apples": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 44}, "game.player_board.PlayerBoard.get_future_apples": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 49}, "game.player_board.PlayerBoard.get_head_location": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 65}, "game.player_board.PlayerBoard.get_tail_location": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 63}, "game.player_board.PlayerBoard.get_head_cells": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 82}, "game.player_board.PlayerBoard.get_tail_cells": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 82}, "game.player_board.PlayerBoard.get_all_locations": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 70}, "game.player_board.PlayerBoard.get_length": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 46}, "game.player_board.PlayerBoard.get_unqueued_length": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 50}, "game.player_board.PlayerBoard.get_queued_length": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 54}, "game.player_board.PlayerBoard.get_am_player_a": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 63}, "game.player_board.PlayerBoard.get_time_left": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 59}, "game.player_board.PlayerBoard.is_possible_direction": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 79}, "game.player_board.PlayerBoard.is_possible_move": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 118}, "game.player_board.PlayerBoard.is_valid_action": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 66}, "game.player_board.PlayerBoard.is_valid_move": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 89}, "game.player_board.PlayerBoard.is_valid_trap": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 47}, "game.player_board.PlayerBoard.is_valid_turn": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 99}, "game.player_board.PlayerBoard.get_loc_after_move": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 81}, "game.player_board.PlayerBoard.get_possible_directions": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 70}, "game.player_board.PlayerBoard.get_apples_eaten": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 57}, "game.player_board.PlayerBoard.cell_in_bounds": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 49}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 49}, "game.player_board.PlayerBoard.try_move": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 123}, "game.player_board.PlayerBoard.try_trap": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 61}, "game.player_board.PlayerBoard.try_action": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 56, "bases": 0, "doc": 78}, "game.player_board.PlayerBoard.try_sacrifice": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 90}, "game.player_board.PlayerBoard.apply_sacrifice": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 89}, "game.player_board.PlayerBoard.apply_action": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 52, "bases": 0, "doc": 61}, "game.player_board.PlayerBoard.apply_trap": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 54}, "game.player_board.PlayerBoard.apply_move": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 149}, "game.player_board.PlayerBoard.apply_turn": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 173}, "game.player_board.PlayerBoard.end_turn": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 35}, "game.player_board.PlayerBoard.forecast_action": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 102}, "game.player_board.PlayerBoard.forecast_trap": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 85}, "game.player_board.PlayerBoard.forecast_move": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 123}, "game.player_board.PlayerBoard.forecast_turn": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 131}, "game.player_board.PlayerBoard.reverse_perspective": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "game.player_board.PlayerBoard.is_my_turn": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 29}, "game.player_board.PlayerBoard.is_enemy_turn": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 29}, "game.player_board.PlayerBoard.get_copy": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 27}, "game.player_board.PlayerBoard.is_occupied": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 57}, "game.player_board.PlayerBoard.get_my_trap_life": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 59}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 59}, "game.player_board.PlayerBoard.has_my_trap": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 66}, "game.player_board.PlayerBoard.has_enemy_trap": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 66}, "game.player_board.PlayerBoard.has_apple": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 55}, "game.player_board.PlayerBoard.get_snake_mask": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 99}, "game.player_board.PlayerBoard.get_trap_mask": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 102}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 102}, "game.player_board.PlayerBoard.get_wall_mask": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 37}, "game.player_board.PlayerBoard.get_portal_mask": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 140}, "game.player_board.PlayerBoard.get_portal_dest": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 87}, "game.player_board.PlayerBoard.is_portal": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 61}, "game.player_board.PlayerBoard.get_portal_dict": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 58}, "game.player_board.PlayerBoard.get_apple_mask": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 38}, "game.player_board.PlayerBoard.get_turn_count": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 28}, "game.player_board.PlayerBoard.get_traps_until_limit": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 93}, "game.player_board.PlayerBoard.get_traps_placed": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 81}, "game.player_board.PlayerBoard.get_traps_limit": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 83}, "game.player_board.PlayerBoard.get_max_length": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 73}, "game.player_board.PlayerBoard.cell_occupied_by": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 64}, "game.player_board.PlayerBoard.currently_decaying": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 30}, "game.player_board.PlayerBoard.get_current_decay_interval": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 31}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 33}, "game.player_board.PlayerBoard.get_next_decay_interval": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 41}, "game.player_board.PlayerBoard.get_next_decay_event": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "game.snake": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.snake.Snake": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 24}, "game.snake.Snake.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 52}, "game.snake.Snake.min_player_size": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "game.snake.Snake.get_max_traps": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 48}, "game.snake.Snake.start": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 42}, "game.snake.Snake.get_lengthen_coef": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 34}, "game.snake.Snake.increment_sacrifice": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "game.snake.Snake.reset": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "game.snake.Snake.get_head_loc": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 36}, "game.snake.Snake.get_tail_loc": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 36}, "game.snake.Snake.get_all_loc": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 38}, "game.snake.Snake.get_direction": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 33}, "game.snake.Snake.get_unqueued_length": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 25}, "game.snake.Snake.get_length": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 37}, "game.snake.Snake.get_next_loc": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 85}, "game.snake.Snake.is_valid_bid": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 63}, "game.snake.Snake.is_valid_trap": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 89, "bases": 0, "doc": 91}, "game.snake.Snake.is_valid_direction": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 90}, "game.snake.Snake.is_valid_sacrifice": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 72}, "game.snake.Snake.can_move": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 131}, "game.snake.Snake.get_valid_directions": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 61}, "game.snake.Snake.eat_apple": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "game.snake.Snake.get_apples_eaten": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 28}, "game.snake.Snake.apply_bid": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 36}, "game.snake.Snake.get_last_cells": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 61}, "game.snake.Snake.get_first_cells": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 62}, "game.snake.Snake.try_sacrifice": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 69}, "game.snake.Snake.apply_sacrifice": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 67}, "game.snake.Snake.apply_head_move": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 59}, "game.snake.Snake.try_trap": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 32}, "game.snake.Snake.try_move": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 95}, "game.snake.Snake.push_trap": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 19, "bases": 0, "doc": 33}, "game.snake.Snake.push_head_cell": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 28}, "game.snake.Snake.push_move": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 107}, "game.snake.Snake.get_copy": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 24}}, "length": 230, "save": true}, "index": {"qualname": {"root": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_map.Map.__init__": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 5, "b": {"docs": {"game.board.Board.get_b_time": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.game_map.Map.start_b": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.map": {"tf": 1}, "game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.increment_traps": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.game_board": {"tf": 1}}, "df": 43}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.set_build_history": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 8}}, "y": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_map.Map.__init__": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.increment_traps": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}}, "df": 3}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.infos": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.game_map.Map.is_record": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 27}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.map": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.game_map.Map.__init__": {"tf": 1}, "game.game_map.Map.decay_timeline": {"tf": 1}, "game.game_map.Map.trap_timeout": {"tf": 1}, "game.game_map.Map.map_string": {"tf": 1.4142135623730951}, "game.game_map.Map.trap_sacrifice": {"tf": 1}, "game.game_map.Map.infos": {"tf": 1}, "game.game_map.Map.dim_x": {"tf": 1}, "game.game_map.Map.dim_y": {"tf": 1}, "game.game_map.Map.start_a": {"tf": 1}, "game.game_map.Map.start_b": {"tf": 1}, "game.game_map.Map.start_size": {"tf": 1}, "game.game_map.Map.min_player_size": {"tf": 1}, "game.game_map.Map.is_record": {"tf": 1}, "game.game_map.Map.cells_walls": {"tf": 1}, "game.game_map.Map.max_turns": {"tf": 1}, "game.game_map.Map.portal_dict": {"tf": 1}, "game.game_map.Map.cells_portals": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1.4142135623730951}, "game.game_map.Map.reflect": {"tf": 1}}, "df": 23}, "x": {"docs": {"game.game_map.Map.max_turns": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 13}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 3}}, "y": {"docs": {"game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}, "game.game_map.Map.start_a": {"tf": 1}, "game.game_map.Map.start_b": {"tf": 1}, "game.game_map.Map.start_size": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map.map_string": {"tf": 1}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_square": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.spawn_apples": {"tf": 1}}, "df": 1, "s": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.enums.Cell.SPACE": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.SOUTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHWEST": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.trap_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}}, "df": 7}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.start_size": {"tf": 1}, "game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 38}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.set_errlog": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.ERROR": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.EAST": {"tf": 1}}, "df": 1}}, "t": {"docs": {"game.snake.Snake.eat_apple": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}}, "df": 9}}}, "d": {"docs": {"game.player_board.PlayerBoard.end_turn": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.is_empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.game_map.Map.start_a": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}}, "df": 5, "s": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 7, "s": {"docs": {"game.board.Board.spawn_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}}, "df": 5}}, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 13}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_valid_action": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}}, "df": 16}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue.peek_all": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}}, "df": 3}}, "m": {"docs": {"game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 14, "s": {"docs": {"game.game_map.Map.max_turns": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.decay_timeline": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.trap_timeout": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"game.enums.Result.TIE": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.game_map.Map.trap_timeout": {"tf": 1}, "game.game_map.Map.trap_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}}, "df": 21, "s": {"docs": {"game.board.Board.increment_traps": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}}, "df": 7}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}}, "df": 5}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 66}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.get_map_generated": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.game_board": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 9}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.WEST": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.enums.Cell.WALL": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}}, "df": 2, "s": {"docs": {"game.game_map.Map.cells_walls": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}}, "df": 2, "d": {"docs": {"game.board.Board.get_bid_resolved": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Result": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.reset": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.is_record": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 1}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_history_json": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 17}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.enums.Cell": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 15, "s": {"docs": {"game.game_map.Map.cells_walls": {"tf": 1}, "game.game_map.Map.cells_portals": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 10}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.capacity": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"game.snake.Snake.can_move": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.currently_decaying": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.game_map.Map.decay_timeline": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.currently_decaying": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"game.game_map.Map.dim_x": {"tf": 1}, "game.game_map.Map.dim_y": {"tf": 1}, "game.game_queue.Queue.dim": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 4, "s": {"docs": {"game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.next_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.NORTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHWEST": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 8}}}}}}}, "f": {"docs": {"game.enums.Action.FF": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 12, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.game_board": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 86}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.game_map.Map.portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 5, "s": {"docs": {"game.game_map.Map.cells_portals": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {"game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 1}}}}}}}}}}}, "x": {"docs": {"game.game_map.Map.dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}}, "df": 2, "y": {"docs": {"game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 1}}, "y": {"docs": {"game.game_map.Map.dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 2}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.capacity": {"tf": 1}, "game.game_queue.Queue.dim": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}}, "df": 15, "d": {"docs": {"game.player_board.PlayerBoard.get_queued_length": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.get_all_locations": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 1}}}}}}}, "fullname": {"root": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_map.Map.__init__": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 5, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.board": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.map": {"tf": 1}, "game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.increment_traps": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.enums": {"tf": 1}, "game.enums.Result": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.enums.Cell": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}, "game.game_map": {"tf": 1.4142135623730951}, "game.game_map.Map": {"tf": 1.4142135623730951}, "game.game_map.Map.__init__": {"tf": 1.4142135623730951}, "game.game_map.Map.decay_timeline": {"tf": 1.4142135623730951}, "game.game_map.Map.trap_timeout": {"tf": 1.4142135623730951}, "game.game_map.Map.map_string": {"tf": 1.4142135623730951}, "game.game_map.Map.trap_sacrifice": {"tf": 1.4142135623730951}, "game.game_map.Map.infos": {"tf": 1.4142135623730951}, "game.game_map.Map.dim_x": {"tf": 1.4142135623730951}, "game.game_map.Map.dim_y": {"tf": 1.4142135623730951}, "game.game_map.Map.start_a": {"tf": 1.4142135623730951}, "game.game_map.Map.start_b": {"tf": 1.4142135623730951}, "game.game_map.Map.start_size": {"tf": 1.4142135623730951}, "game.game_map.Map.min_player_size": {"tf": 1.4142135623730951}, "game.game_map.Map.is_record": {"tf": 1.4142135623730951}, "game.game_map.Map.cells_walls": {"tf": 1.4142135623730951}, "game.game_map.Map.max_turns": {"tf": 1.4142135623730951}, "game.game_map.Map.portal_dict": {"tf": 1.4142135623730951}, "game.game_map.Map.cells_portals": {"tf": 1.4142135623730951}, "game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_map.Map.get_recorded_map": {"tf": 1.4142135623730951}, "game.game_map.Map.reflect": {"tf": 1.4142135623730951}, "game.game_queue": {"tf": 1.4142135623730951}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.capacity": {"tf": 1.4142135623730951}, "game.game_queue.Queue.dim": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}, "game.player_board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.game_board": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake": {"tf": 1}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 230}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 66}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.get_map_generated": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {"game.board.Board.get_b_time": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.game_map.Map.start_b": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.board": {"tf": 1}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.map": {"tf": 1.4142135623730951}, "game.board.Board.set_errlog": {"tf": 1.4142135623730951}, "game.board.Board.is_as_turn": {"tf": 1.4142135623730951}, "game.board.Board.get_a_time": {"tf": 1.4142135623730951}, "game.board.Board.get_b_time": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.tiebreak": {"tf": 1.4142135623730951}, "game.board.Board.set_build_history": {"tf": 1.4142135623730951}, "game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1.4142135623730951}, "game.board.Board.get_history_json": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.resolve_bid": {"tf": 1.4142135623730951}, "game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.check_turn_start": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.increment_traps": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.next_turn": {"tf": 1.4142135623730951}, "game.board.Board.spawn_apples": {"tf": 1.4142135623730951}, "game.board.Board.get_history": {"tf": 1.4142135623730951}, "game.board.Board.get_map_generated": {"tf": 1.4142135623730951}, "game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}, "game.player_board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.game_board": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 130}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.set_build_history": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 8}}, "y": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_map.Map.__init__": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 5}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.increment_traps": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}}, "df": 3}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.infos": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.game_map.Map.is_record": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 27}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.map": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_map": {"tf": 1}, "game.game_map.Map": {"tf": 1.4142135623730951}, "game.game_map.Map.__init__": {"tf": 1.4142135623730951}, "game.game_map.Map.decay_timeline": {"tf": 1.4142135623730951}, "game.game_map.Map.trap_timeout": {"tf": 1.4142135623730951}, "game.game_map.Map.map_string": {"tf": 1.7320508075688772}, "game.game_map.Map.trap_sacrifice": {"tf": 1.4142135623730951}, "game.game_map.Map.infos": {"tf": 1.4142135623730951}, "game.game_map.Map.dim_x": {"tf": 1.4142135623730951}, "game.game_map.Map.dim_y": {"tf": 1.4142135623730951}, "game.game_map.Map.start_a": {"tf": 1.4142135623730951}, "game.game_map.Map.start_b": {"tf": 1.4142135623730951}, "game.game_map.Map.start_size": {"tf": 1.4142135623730951}, "game.game_map.Map.min_player_size": {"tf": 1.4142135623730951}, "game.game_map.Map.is_record": {"tf": 1.4142135623730951}, "game.game_map.Map.cells_walls": {"tf": 1.4142135623730951}, "game.game_map.Map.max_turns": {"tf": 1.4142135623730951}, "game.game_map.Map.portal_dict": {"tf": 1.4142135623730951}, "game.game_map.Map.cells_portals": {"tf": 1.4142135623730951}, "game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_map.Map.get_recorded_map": {"tf": 1.7320508075688772}, "game.game_map.Map.reflect": {"tf": 1.4142135623730951}}, "df": 24}, "x": {"docs": {"game.game_map.Map.max_turns": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 6}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 13}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 3}}, "y": {"docs": {"game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}, "game.game_map.Map.start_a": {"tf": 1}, "game.game_map.Map.start_b": {"tf": 1}, "game.game_map.Map.start_size": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 5}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map.map_string": {"tf": 1}}, "df": 2}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_square": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.spawn_apples": {"tf": 1}}, "df": 1, "s": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.enums.Cell.SPACE": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.SOUTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHWEST": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.trap_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}}, "df": 7}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.start_size": {"tf": 1}, "game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 4}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.snake": {"tf": 1}, "game.snake.Snake": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1.4142135623730951}, "game.snake.Snake.min_player_size": {"tf": 1.4142135623730951}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.start": {"tf": 1.4142135623730951}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.increment_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.reset": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.get_unqueued_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.eat_apple": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 39}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.set_errlog": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.ERROR": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"game.enums": {"tf": 1}, "game.enums.Result": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.enums.Cell": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 25}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}}, "df": 9}}}, "d": {"docs": {"game.player_board.PlayerBoard.end_turn": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.EAST": {"tf": 1}}, "df": 1}}, "t": {"docs": {"game.snake.Snake.eat_apple": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.is_empty": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.game_map.Map.start_a": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}}, "df": 5, "s": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 7, "s": {"docs": {"game.board.Board.spawn_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}}, "df": 5}}, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 13}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_valid_action": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}}, "df": 16}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue.peek_all": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}}, "df": 3}}, "m": {"docs": {"game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}}, "df": 1}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 14, "s": {"docs": {"game.game_map.Map.max_turns": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.decay_timeline": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.trap_timeout": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"game.enums.Result.TIE": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.game_map.Map.trap_timeout": {"tf": 1}, "game.game_map.Map.trap_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}}, "df": 21, "s": {"docs": {"game.board.Board.increment_traps": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}}, "df": 7}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}}, "df": 5}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}}, "df": 5}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 9}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.WEST": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.enums.Cell.WALL": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}}, "df": 2, "s": {"docs": {"game.game_map.Map.cells_walls": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}}, "df": 2, "d": {"docs": {"game.board.Board.get_bid_resolved": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Result": {"tf": 1}, "game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.reset": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.is_record": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 1}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_history_json": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 17}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.enums.Cell": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 15, "s": {"docs": {"game.game_map.Map.cells_walls": {"tf": 1}, "game.game_map.Map.cells_portals": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 10}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 5}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.capacity": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"game.snake.Snake.can_move": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.currently_decaying": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.game_map.Map.decay_timeline": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.currently_decaying": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"game.game_map.Map.dim_x": {"tf": 1}, "game.game_map.Map.dim_y": {"tf": 1}, "game.game_queue.Queue.dim": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 5}, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 4, "s": {"docs": {"game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 2}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.next_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.NORTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHWEST": {"tf": 1}}, "df": 1}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 8}}}}}}}, "f": {"docs": {"game.enums.Action.FF": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.game_map.Map.min_player_size": {"tf": 1}, "game.player_board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.game_board": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.player_snake": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.min_player_size": {"tf": 1}}, "df": 93, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.game_board": {"tf": 1}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1}, "game.player_board.PlayerBoard.player_snake": {"tf": 1}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1}, "game.player_board.PlayerBoard.player_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 86}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.game_map.Map.portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 5, "s": {"docs": {"game.game_map.Map.cells_portals": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}}, "df": 3}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 5}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {"game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 1}}}}}}}}}}}, "x": {"docs": {"game.game_map.Map.dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}}, "df": 2, "y": {"docs": {"game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}}, "df": 1}}, "y": {"docs": {"game.game_map.Map.dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 2}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue": {"tf": 1}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.capacity": {"tf": 1.4142135623730951}, "game.game_queue.Queue.dim": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}}, "df": 16, "d": {"docs": {"game.player_board.PlayerBoard.get_queued_length": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 5, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.get_all_locations": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 1}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"0": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}}, "df": 3}, "1": {"docs": {"game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}}, "df": 3}, "2": {"docs": {"game.enums.Result.TIE": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}}, "df": 3}, "3": {"docs": {"game.enums.Result.ERROR": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}}, "df": 3}, "4": {"docs": {"game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}}, "df": 2}, "5": {"docs": {"game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}}, "df": 2}, "6": {"docs": {"game.enums.Action.WEST": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 2}, "7": {"docs": {"game.enums.Action.NORTHWEST": {"tf": 1}}, "df": 1}, "8": {"docs": {"game.enums.Action.TRAP": {"tf": 1}}, "df": 1}, "9": {"docs": {"game.enums.Action.FF": {"tf": 1}}, "df": 1}, "docs": {"game.enums.Result.PLAYER_A": {"tf": 1.4142135623730951}, "game.enums.Result.PLAYER_B": {"tf": 1.4142135623730951}, "game.enums.Result.TIE": {"tf": 1.4142135623730951}, "game.enums.Result.ERROR": {"tf": 1.4142135623730951}, "game.enums.Action.NORTH": {"tf": 1.4142135623730951}, "game.enums.Action.NORTHEAST": {"tf": 1.4142135623730951}, "game.enums.Action.EAST": {"tf": 1.4142135623730951}, "game.enums.Action.SOUTHEAST": {"tf": 1.4142135623730951}, "game.enums.Action.SOUTH": {"tf": 1.4142135623730951}, "game.enums.Action.SOUTHWEST": {"tf": 1.4142135623730951}, "game.enums.Action.WEST": {"tf": 1.4142135623730951}, "game.enums.Action.NORTHWEST": {"tf": 1.4142135623730951}, "game.enums.Action.TRAP": {"tf": 1.4142135623730951}, "game.enums.Action.FF": {"tf": 1.4142135623730951}, "game.enums.Cell.SPACE": {"tf": 1.4142135623730951}, "game.enums.Cell.WALL": {"tf": 1.4142135623730951}, "game.enums.Cell.APPLE": {"tf": 1.4142135623730951}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1.4142135623730951}, "game.enums.Cell.PLAYER_BODY": {"tf": 1.4142135623730951}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1.4142135623730951}, "game.enums.Cell.ENEMY_BODY": {"tf": 1.4142135623730951}}, "df": 21, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 21}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}}, "df": 10}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.enums.Cell.APPLE": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Result.PLAYER_A": {"tf": 1}, "game.enums.Result.PLAYER_B": {"tf": 1}, "game.enums.Result.TIE": {"tf": 1}, "game.enums.Result.ERROR": {"tf": 1}, "game.enums.Action.NORTH": {"tf": 1}, "game.enums.Action.NORTHEAST": {"tf": 1}, "game.enums.Action.EAST": {"tf": 1}, "game.enums.Action.SOUTHEAST": {"tf": 1}, "game.enums.Action.SOUTH": {"tf": 1}, "game.enums.Action.SOUTHWEST": {"tf": 1}, "game.enums.Action.WEST": {"tf": 1}, "game.enums.Action.NORTHWEST": {"tf": 1}, "game.enums.Action.TRAP": {"tf": 1}, "game.enums.Action.FF": {"tf": 1}, "game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 21}}, "b": {"docs": {"game.enums.Result.PLAYER_B": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {"game.enums.Result.TIE": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.enums.Action.TRAP": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"game.enums.Result.ERROR": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.EAST": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.NORTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.NORTHWEST": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.enums.Action.SOUTH": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHEAST": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.SOUTHWEST": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.enums.Cell.SPACE": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.enums.Action.WEST": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.enums.Cell.WALL": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"game.enums.Action.FF": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.enums.Cell.SPACE": {"tf": 1}, "game.enums.Cell.WALL": {"tf": 1}, "game.enums.Cell.APPLE": {"tf": 1}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.PLAYER_BODY": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_BODY": {"tf": 1}}, "df": 7}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.enums.Cell.PLAYER_HEAD": {"tf": 1}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1}}, "df": 2}}}}}}, "signature": {"root": {"0": {"docs": {"game.board.Board.apply_turn": {"tf": 1}}, "df": 1}, "1": {"docs": {"game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 2}, "2": {"0": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1}, "docs": {"game.game_queue.Queue.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 2}, "3": {"9": {"docs": {"game.board.Board.set_winner": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0}, "5": {"0": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {"game.board.Board.__init__": {"tf": 8.12403840463596}, "game.board.Board.set_errlog": {"tf": 4.69041575982343}, "game.board.Board.is_as_turn": {"tf": 3.4641016151377544}, "game.board.Board.get_a_time": {"tf": 3.4641016151377544}, "game.board.Board.get_b_time": {"tf": 3.4641016151377544}, "game.board.Board.has_apple_tuple": {"tf": 5.477225575051661}, "game.board.Board.has_apple": {"tf": 5.291502622129181}, "game.board.Board.tiebreak": {"tf": 3.1622776601683795}, "game.board.Board.set_build_history": {"tf": 4.242640687119285}, "game.board.Board.set_winner": {"tf": 6.48074069840786}, "game.board.Board.get_winner": {"tf": 4.47213595499958}, "game.board.Board.get_win_reason": {"tf": 3.4641016151377544}, "game.board.Board.get_history_json": {"tf": 3.1622776601683795}, "game.board.Board.is_valid_bid": {"tf": 4.47213595499958}, "game.board.Board.resolve_bid": {"tf": 5.0990195135927845}, "game.board.Board.get_bid_resolved": {"tf": 3.4641016151377544}, "game.board.Board.is_valid_trap": {"tf": 5.0990195135927845}, "game.board.Board.is_valid_action": {"tf": 6.48074069840786}, "game.board.Board.is_valid_move": {"tf": 7.745966692414834}, "game.board.Board.is_valid_turn": {"tf": 5.477225575051661}, "game.board.Board.is_valid_cell": {"tf": 6.48074069840786}, "game.board.Board.is_valid_cell_copy": {"tf": 4.69041575982343}, "game.board.Board.cell_in_bounds": {"tf": 6.48074069840786}, "game.board.Board.apply_decay": {"tf": 6.324555320336759}, "game.board.Board.increment_decay": {"tf": 3.1622776601683795}, "game.board.Board.apply_turn": {"tf": 7.54983443527075}, "game.board.Board.check_turn_start": {"tf": 4.242640687119285}, "game.board.Board.apply_trap": {"tf": 6.324555320336759}, "game.board.Board.increment_traps": {"tf": 3.1622776601683795}, "game.board.Board.resolve_square": {"tf": 7.810249675906654}, "game.board.Board.apply_move": {"tf": 8.660254037844387}, "game.board.Board.next_turn": {"tf": 3.1622776601683795}, "game.board.Board.spawn_apples": {"tf": 3.1622776601683795}, "game.board.Board.get_history": {"tf": 3.4641016151377544}, "game.board.Board.get_map_generated": {"tf": 3.4641016151377544}, "game.board.Board.get_copy": {"tf": 5.830951894845301}, "game.board.Board.forecast_trap": {"tf": 6.6332495807108}, "game.board.Board.forecast_move": {"tf": 8.831760866327848}, "game.board.Board.forecast_turn": {"tf": 6.928203230275509}, "game.board.Board.get_board_string": {"tf": 6.082762530298219}, "game.game_map.Map.__init__": {"tf": 2.8284271247461903}, "game.game_map.Map.add_apple_spawns": {"tf": 5.477225575051661}, "game.game_map.Map.get_recorded_map": {"tf": 3.1622776601683795}, "game.game_map.Map.reflect": {"tf": 4.242640687119285}, "game.game_queue.Queue.__init__": {"tf": 6.782329983125268}, "game.game_queue.Queue.get_copy": {"tf": 4.47213595499958}, "game.game_queue.Queue.push": {"tf": 4.69041575982343}, "game.game_queue.Queue.peek_head": {"tf": 4}, "game.game_queue.Queue.peek_tail": {"tf": 4}, "game.game_queue.Queue.peek_all": {"tf": 4}, "game.game_queue.Queue.peek_many_tail": {"tf": 4.898979485566356}, "game.game_queue.Queue.peek_many_head": {"tf": 4.898979485566356}, "game.game_queue.Queue.push_many": {"tf": 4.69041575982343}, "game.game_queue.Queue.pop": {"tf": 4}, "game.game_queue.Queue.pop_many": {"tf": 4.898979485566356}, "game.game_queue.Queue.is_empty": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.__init__": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_direction": {"tf": 5.830951894845301}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 4.47213595499958}, "game.player_board.PlayerBoard.apply_bid": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 6}, "game.player_board.PlayerBoard.is_game_over": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 4}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_head_location": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 5.656854249492381}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 5.656854249492381}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.get_length": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_time_left": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 6.48074069840786}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 7.745966692414834}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 6.48074069840786}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 7.745966692414834}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 6.782329983125268}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 6.48074069840786}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.try_move": {"tf": 8.602325267042627}, "game.player_board.PlayerBoard.try_trap": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.try_action": {"tf": 6.782329983125268}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 6.324555320336759}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 6.324555320336759}, "game.player_board.PlayerBoard.apply_action": {"tf": 6.48074069840786}, "game.player_board.PlayerBoard.apply_trap": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.apply_move": {"tf": 7.745966692414834}, "game.player_board.PlayerBoard.apply_turn": {"tf": 6.6332495807108}, "game.player_board.PlayerBoard.end_turn": {"tf": 4.898979485566356}, "game.player_board.PlayerBoard.forecast_action": {"tf": 7.937253933193772}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 6.782329983125268}, "game.player_board.PlayerBoard.forecast_move": {"tf": 8.831760866327848}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 8.12403840463596}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_copy": {"tf": 4.47213595499958}, "game.player_board.PlayerBoard.is_occupied": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.has_apple": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 6.6332495807108}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 6.6332495807108}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 6.6332495807108}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 4}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 5.477225575051661}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 5.656854249492381}, "game.player_board.PlayerBoard.is_portal": {"tf": 5.291502622129181}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 4}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.get_max_length": {"tf": 5.0990195135927845}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 6}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 4.69041575982343}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 3.4641016151377544}, "game.snake.Snake.__init__": {"tf": 5.656854249492381}, "game.snake.Snake.get_max_traps": {"tf": 3.4641016151377544}, "game.snake.Snake.start": {"tf": 5.477225575051661}, "game.snake.Snake.get_lengthen_coef": {"tf": 3.4641016151377544}, "game.snake.Snake.increment_sacrifice": {"tf": 3.1622776601683795}, "game.snake.Snake.reset": {"tf": 3.1622776601683795}, "game.snake.Snake.get_head_loc": {"tf": 4}, "game.snake.Snake.get_tail_loc": {"tf": 4}, "game.snake.Snake.get_all_loc": {"tf": 4}, "game.snake.Snake.get_direction": {"tf": 4.47213595499958}, "game.snake.Snake.get_unqueued_length": {"tf": 3.4641016151377544}, "game.snake.Snake.get_length": {"tf": 3.4641016151377544}, "game.snake.Snake.get_next_loc": {"tf": 6.324555320336759}, "game.snake.Snake.is_valid_bid": {"tf": 4.47213595499958}, "game.snake.Snake.is_valid_trap": {"tf": 8.54400374531753}, "game.snake.Snake.is_valid_direction": {"tf": 7.280109889280518}, "game.snake.Snake.is_valid_sacrifice": {"tf": 6.324555320336759}, "game.snake.Snake.can_move": {"tf": 9.1104335791443}, "game.snake.Snake.get_valid_directions": {"tf": 5.830951894845301}, "game.snake.Snake.eat_apple": {"tf": 3.1622776601683795}, "game.snake.Snake.get_apples_eaten": {"tf": 3.4641016151377544}, "game.snake.Snake.apply_bid": {"tf": 4.242640687119285}, "game.snake.Snake.get_last_cells": {"tf": 5.477225575051661}, "game.snake.Snake.get_first_cells": {"tf": 5.477225575051661}, "game.snake.Snake.try_sacrifice": {"tf": 5.477225575051661}, "game.snake.Snake.apply_sacrifice": {"tf": 5.0990195135927845}, "game.snake.Snake.apply_head_move": {"tf": 5.656854249492381}, "game.snake.Snake.try_trap": {"tf": 4}, "game.snake.Snake.try_move": {"tf": 7.681145747868608}, "game.snake.Snake.push_trap": {"tf": 4}, "game.snake.Snake.push_head_cell": {"tf": 4.69041575982343}, "game.snake.Snake.push_move": {"tf": 7.681145747868608}, "game.snake.Snake.get_copy": {"tf": 4.47213595499958}}, "df": 166, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.__init__": {"tf": 1.7320508075688772}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.__init__": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 38}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.__init__": {"tf": 1.7320508075688772}, "game.game_map.Map.__init__": {"tf": 1}}, "df": 2}, "x": {"docs": {"game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}}, "df": 7, "s": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 4}}}}, "y": {"docs": {"game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.__init__": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1, "r": {"docs": {"game.board.Board.apply_turn": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}}, "df": 11}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}}, "df": 20}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 16}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 7}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}}, "df": 11, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 10, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}}, "df": 6}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.get_copy": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 40}}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 1.7320508075688772}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 83}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.__init__": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}}, "df": 11}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 6, "a": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}, "b": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 5}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 16}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.increment_traps": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_map.Map.reflect": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 161}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_map.Map.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.start": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 16}}}}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.reflect": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.set_errlog": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 27}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}}, "df": 35}}}}}, "a": {"docs": {"game.board.Board.set_errlog": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.7320508075688772}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 24}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1.7320508075688772}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 10}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 2}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 71}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.set_winner": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"game.player_board.PlayerBoard.__init__": {"tf": 1}}, "df": 1}}, "x": {"docs": {"game.board.Board.has_apple": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 12}, "y": {"docs": {"game.board.Board.has_apple": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 12}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.set_winner": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 3}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 2}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 28}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 8, "p": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 43}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 43}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}}, "df": 3}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 16}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.get_history": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 2}}, "m": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 3}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue.get_copy": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.enums.Result": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Cell": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.enums.Result": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Cell": {"tf": 1}}, "df": 3}}}}}}}}}, "doc": {"root": {"0": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 2, "/": {"1": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}, "1": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 9}, "2": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}}, "df": 8, "d": {"docs": {"game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 6}}, "3": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}}, "df": 1}, "5": {"0": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"5": {"5": {"3": {"6": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"game": {"tf": 13.19090595827292}, "game.board": {"tf": 1.7320508075688772}, "game.board.Board": {"tf": 3.4641016151377544}, "game.board.Board.__init__": {"tf": 4.123105625617661}, "game.board.Board.map": {"tf": 1.7320508075688772}, "game.board.Board.set_errlog": {"tf": 1.7320508075688772}, "game.board.Board.is_as_turn": {"tf": 2}, "game.board.Board.get_a_time": {"tf": 2}, "game.board.Board.get_b_time": {"tf": 2}, "game.board.Board.has_apple_tuple": {"tf": 3.4641016151377544}, "game.board.Board.has_apple": {"tf": 3.872983346207417}, "game.board.Board.tiebreak": {"tf": 1.7320508075688772}, "game.board.Board.set_build_history": {"tf": 2.8284271247461903}, "game.board.Board.set_winner": {"tf": 3}, "game.board.Board.get_winner": {"tf": 2.6457513110645907}, "game.board.Board.get_win_reason": {"tf": 2.6457513110645907}, "game.board.Board.get_history_json": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_bid": {"tf": 3.4641016151377544}, "game.board.Board.resolve_bid": {"tf": 3.3166247903554}, "game.board.Board.get_bid_resolved": {"tf": 2.6457513110645907}, "game.board.Board.is_valid_trap": {"tf": 3.4641016151377544}, "game.board.Board.is_valid_action": {"tf": 4.242640687119285}, "game.board.Board.is_valid_move": {"tf": 4.58257569495584}, "game.board.Board.is_valid_turn": {"tf": 3.872983346207417}, "game.board.Board.is_valid_cell": {"tf": 3.4641016151377544}, "game.board.Board.is_valid_cell_copy": {"tf": 1.7320508075688772}, "game.board.Board.cell_in_bounds": {"tf": 3.4641016151377544}, "game.board.Board.apply_decay": {"tf": 3.872983346207417}, "game.board.Board.increment_decay": {"tf": 2.449489742783178}, "game.board.Board.apply_turn": {"tf": 5.196152422706632}, "game.board.Board.check_turn_start": {"tf": 2.8284271247461903}, "game.board.Board.apply_trap": {"tf": 3.872983346207417}, "game.board.Board.increment_traps": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 4.47213595499958}, "game.board.Board.apply_move": {"tf": 5.196152422706632}, "game.board.Board.next_turn": {"tf": 1.7320508075688772}, "game.board.Board.spawn_apples": {"tf": 1.7320508075688772}, "game.board.Board.get_history": {"tf": 2.6457513110645907}, "game.board.Board.get_map_generated": {"tf": 2.6457513110645907}, "game.board.Board.get_copy": {"tf": 3.4641016151377544}, "game.board.Board.forecast_trap": {"tf": 3.605551275463989}, "game.board.Board.forecast_move": {"tf": 4}, "game.board.Board.forecast_turn": {"tf": 4.242640687119285}, "game.board.Board.get_board_string": {"tf": 7.211102550927978}, "game.enums": {"tf": 1.7320508075688772}, "game.enums.Result": {"tf": 1.7320508075688772}, "game.enums.Result.PLAYER_A": {"tf": 1.7320508075688772}, "game.enums.Result.PLAYER_B": {"tf": 1.7320508075688772}, "game.enums.Result.TIE": {"tf": 1.7320508075688772}, "game.enums.Result.ERROR": {"tf": 1.7320508075688772}, "game.enums.Action": {"tf": 1.7320508075688772}, "game.enums.Action.NORTH": {"tf": 1.7320508075688772}, "game.enums.Action.NORTHEAST": {"tf": 1.7320508075688772}, "game.enums.Action.EAST": {"tf": 1.7320508075688772}, "game.enums.Action.SOUTHEAST": {"tf": 1.7320508075688772}, "game.enums.Action.SOUTH": {"tf": 1.7320508075688772}, "game.enums.Action.SOUTHWEST": {"tf": 1.7320508075688772}, "game.enums.Action.WEST": {"tf": 1.7320508075688772}, "game.enums.Action.NORTHWEST": {"tf": 1.7320508075688772}, "game.enums.Action.TRAP": {"tf": 1.7320508075688772}, "game.enums.Action.FF": {"tf": 1.7320508075688772}, "game.enums.Cell": {"tf": 1.7320508075688772}, "game.enums.Cell.SPACE": {"tf": 1.7320508075688772}, "game.enums.Cell.WALL": {"tf": 1.7320508075688772}, "game.enums.Cell.APPLE": {"tf": 1.7320508075688772}, "game.enums.Cell.PLAYER_HEAD": {"tf": 1.7320508075688772}, "game.enums.Cell.PLAYER_BODY": {"tf": 1.7320508075688772}, "game.enums.Cell.ENEMY_HEAD": {"tf": 1.7320508075688772}, "game.enums.Cell.ENEMY_BODY": {"tf": 1.7320508075688772}, "game.game_map": {"tf": 1.7320508075688772}, "game.game_map.Map": {"tf": 1.7320508075688772}, "game.game_map.Map.__init__": {"tf": 1.7320508075688772}, "game.game_map.Map.decay_timeline": {"tf": 1.7320508075688772}, "game.game_map.Map.trap_timeout": {"tf": 1.7320508075688772}, "game.game_map.Map.map_string": {"tf": 1.7320508075688772}, "game.game_map.Map.trap_sacrifice": {"tf": 1.7320508075688772}, "game.game_map.Map.infos": {"tf": 1.7320508075688772}, "game.game_map.Map.dim_x": {"tf": 1.7320508075688772}, "game.game_map.Map.dim_y": {"tf": 1.7320508075688772}, "game.game_map.Map.start_a": {"tf": 1.7320508075688772}, "game.game_map.Map.start_b": {"tf": 1.7320508075688772}, "game.game_map.Map.start_size": {"tf": 1.7320508075688772}, "game.game_map.Map.min_player_size": {"tf": 1.7320508075688772}, "game.game_map.Map.is_record": {"tf": 1.7320508075688772}, "game.game_map.Map.cells_walls": {"tf": 1.7320508075688772}, "game.game_map.Map.max_turns": {"tf": 1.7320508075688772}, "game.game_map.Map.portal_dict": {"tf": 1.7320508075688772}, "game.game_map.Map.cells_portals": {"tf": 1.7320508075688772}, "game.game_map.Map.add_apple_spawns": {"tf": 1.7320508075688772}, "game.game_map.Map.get_recorded_map": {"tf": 1.7320508075688772}, "game.game_map.Map.reflect": {"tf": 1.7320508075688772}, "game.game_queue": {"tf": 1.7320508075688772}, "game.game_queue.Queue": {"tf": 1.7320508075688772}, "game.game_queue.Queue.__init__": {"tf": 3.7416573867739413}, "game.game_queue.Queue.capacity": {"tf": 1.7320508075688772}, "game.game_queue.Queue.dim": {"tf": 1.7320508075688772}, "game.game_queue.Queue.get_copy": {"tf": 2}, "game.game_queue.Queue.push": {"tf": 2.8284271247461903}, "game.game_queue.Queue.peek_head": {"tf": 2.6457513110645907}, "game.game_queue.Queue.peek_tail": {"tf": 2.6457513110645907}, "game.game_queue.Queue.peek_all": {"tf": 2.6457513110645907}, "game.game_queue.Queue.peek_many_tail": {"tf": 3.605551275463989}, "game.game_queue.Queue.peek_many_head": {"tf": 3.7416573867739413}, "game.game_queue.Queue.push_many": {"tf": 2.8284271247461903}, "game.game_queue.Queue.pop": {"tf": 2.6457513110645907}, "game.game_queue.Queue.pop_many": {"tf": 3.3166247903554}, "game.game_queue.Queue.is_empty": {"tf": 3.3166247903554}, "game.player_board": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.__init__": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.game_board": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_player_a": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.player_snake": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.enemy_snake": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.player_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.enemy_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.player_trap_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.enemy_trap_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 2}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_direction": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.apply_bid": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.is_game_over": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_head_location": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 3.605551275463989}, "game.player_board.PlayerBoard.get_length": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_time_left": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 4.242640687119285}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 4.242640687119285}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 3.605551275463989}, "game.player_board.PlayerBoard.try_move": {"tf": 4.242640687119285}, "game.player_board.PlayerBoard.try_trap": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.try_action": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.apply_action": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.apply_trap": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.apply_move": {"tf": 4.898979485566356}, "game.player_board.PlayerBoard.apply_turn": {"tf": 4.898979485566356}, "game.player_board.PlayerBoard.end_turn": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.forecast_action": {"tf": 4.242640687119285}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.forecast_move": {"tf": 4.58257569495584}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 4.58257569495584}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_copy": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_occupied": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.has_apple": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.is_portal": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.get_max_length": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 2.6457513110645907}, "game.snake": {"tf": 1.7320508075688772}, "game.snake.Snake": {"tf": 2.23606797749979}, "game.snake.Snake.__init__": {"tf": 3.3166247903554}, "game.snake.Snake.min_player_size": {"tf": 1.7320508075688772}, "game.snake.Snake.get_max_traps": {"tf": 2.6457513110645907}, "game.snake.Snake.start": {"tf": 3}, "game.snake.Snake.get_lengthen_coef": {"tf": 2.6457513110645907}, "game.snake.Snake.increment_sacrifice": {"tf": 1.7320508075688772}, "game.snake.Snake.reset": {"tf": 1.7320508075688772}, "game.snake.Snake.get_head_loc": {"tf": 2.6457513110645907}, "game.snake.Snake.get_tail_loc": {"tf": 2.6457513110645907}, "game.snake.Snake.get_all_loc": {"tf": 2.6457513110645907}, "game.snake.Snake.get_direction": {"tf": 2.6457513110645907}, "game.snake.Snake.get_unqueued_length": {"tf": 2.449489742783178}, "game.snake.Snake.get_length": {"tf": 2.6457513110645907}, "game.snake.Snake.get_next_loc": {"tf": 3.872983346207417}, "game.snake.Snake.is_valid_bid": {"tf": 3.4641016151377544}, "game.snake.Snake.is_valid_trap": {"tf": 3.872983346207417}, "game.snake.Snake.is_valid_direction": {"tf": 3.872983346207417}, "game.snake.Snake.is_valid_sacrifice": {"tf": 3.872983346207417}, "game.snake.Snake.can_move": {"tf": 4.58257569495584}, "game.snake.Snake.get_valid_directions": {"tf": 3.4641016151377544}, "game.snake.Snake.eat_apple": {"tf": 1.7320508075688772}, "game.snake.Snake.get_apples_eaten": {"tf": 2.6457513110645907}, "game.snake.Snake.apply_bid": {"tf": 2.8284271247461903}, "game.snake.Snake.get_last_cells": {"tf": 3.7416573867739413}, "game.snake.Snake.get_first_cells": {"tf": 3.7416573867739413}, "game.snake.Snake.try_sacrifice": {"tf": 3.4641016151377544}, "game.snake.Snake.apply_sacrifice": {"tf": 3.4641016151377544}, "game.snake.Snake.apply_head_move": {"tf": 3.4641016151377544}, "game.snake.Snake.try_trap": {"tf": 2.6457513110645907}, "game.snake.Snake.try_move": {"tf": 4.123105625617661}, "game.snake.Snake.push_trap": {"tf": 2.6457513110645907}, "game.snake.Snake.push_head_cell": {"tf": 2.8284271247461903}, "game.snake.Snake.push_move": {"tf": 4.242640687119285}, "game.snake.Snake.get_copy": {"tf": 2.6457513110645907}}, "df": 230, "t": {"docs": {"game.board.Board": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 3, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 13}}, "e": {"docs": {"game": {"tf": 6.082762530298219}, "game.board.Board": {"tf": 3}, "game.board.Board.__init__": {"tf": 3}, "game.board.Board.has_apple_tuple": {"tf": 2.449489742783178}, "game.board.Board.has_apple": {"tf": 2}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1.7320508075688772}, "game.board.Board.set_winner": {"tf": 2.6457513110645907}, "game.board.Board.get_winner": {"tf": 2}, "game.board.Board.get_win_reason": {"tf": 2.23606797749979}, "game.board.Board.get_history_json": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.resolve_bid": {"tf": 2.6457513110645907}, "game.board.Board.get_bid_resolved": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_trap": {"tf": 2}, "game.board.Board.is_valid_action": {"tf": 3.1622776601683795}, "game.board.Board.is_valid_move": {"tf": 3.1622776601683795}, "game.board.Board.is_valid_turn": {"tf": 3}, "game.board.Board.is_valid_cell": {"tf": 2.449489742783178}, "game.board.Board.is_valid_cell_copy": {"tf": 1.7320508075688772}, "game.board.Board.cell_in_bounds": {"tf": 2}, "game.board.Board.apply_decay": {"tf": 2.449489742783178}, "game.board.Board.increment_decay": {"tf": 2.8284271247461903}, "game.board.Board.apply_turn": {"tf": 3.7416573867739413}, "game.board.Board.check_turn_start": {"tf": 2}, "game.board.Board.apply_trap": {"tf": 2.6457513110645907}, "game.board.Board.resolve_square": {"tf": 3.1622776601683795}, "game.board.Board.apply_move": {"tf": 3.872983346207417}, "game.board.Board.next_turn": {"tf": 1.4142135623730951}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_history": {"tf": 1.4142135623730951}, "game.board.Board.get_map_generated": {"tf": 1.4142135623730951}, "game.board.Board.get_copy": {"tf": 2.23606797749979}, "game.board.Board.forecast_trap": {"tf": 2.449489742783178}, "game.board.Board.forecast_move": {"tf": 2.8284271247461903}, "game.board.Board.forecast_turn": {"tf": 2.8284271247461903}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_map.Map": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_map.Map.reflect": {"tf": 1}, "game.game_queue.Queue": {"tf": 2.6457513110645907}, "game.game_queue.Queue.__init__": {"tf": 2.449489742783178}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_head": {"tf": 2.449489742783178}, "game.game_queue.Queue.peek_tail": {"tf": 2.449489742783178}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 2.8284271247461903}, "game.game_queue.Queue.peek_many_head": {"tf": 2.8284271247461903}, "game.game_queue.Queue.push_many": {"tf": 1.7320508075688772}, "game.game_queue.Queue.pop": {"tf": 2.23606797749979}, "game.game_queue.Queue.pop_many": {"tf": 2.8284271247461903}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 3}, "game.player_board.PlayerBoard.__init__": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_direction": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_bid": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 2}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_length": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_time_left": {"tf": 3}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 3}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 3}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 2}, "game.player_board.PlayerBoard.try_move": {"tf": 3.872983346207417}, "game.player_board.PlayerBoard.try_trap": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.try_action": {"tf": 3}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 3.3166247903554}, "game.player_board.PlayerBoard.apply_action": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.apply_trap": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.apply_move": {"tf": 3.605551275463989}, "game.player_board.PlayerBoard.apply_turn": {"tf": 4}, "game.player_board.PlayerBoard.end_turn": {"tf": 2}, "game.player_board.PlayerBoard.forecast_action": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 3}, "game.player_board.PlayerBoard.forecast_move": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.has_apple": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 3}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 3.7416573867739413}, "game.player_board.PlayerBoard.is_portal": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 3.4641016151377544}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.get_max_length": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 2}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1.7320508075688772}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 2.23606797749979}, "game.snake.Snake.get_max_traps": {"tf": 2.23606797749979}, "game.snake.Snake.start": {"tf": 2.449489742783178}, "game.snake.Snake.get_lengthen_coef": {"tf": 2}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 2.449489742783178}, "game.snake.Snake.get_tail_loc": {"tf": 2.449489742783178}, "game.snake.Snake.get_all_loc": {"tf": 2}, "game.snake.Snake.get_direction": {"tf": 2}, "game.snake.Snake.get_unqueued_length": {"tf": 2}, "game.snake.Snake.get_length": {"tf": 2}, "game.snake.Snake.get_next_loc": {"tf": 3.3166247903554}, "game.snake.Snake.is_valid_bid": {"tf": 2.449489742783178}, "game.snake.Snake.is_valid_trap": {"tf": 3}, "game.snake.Snake.is_valid_direction": {"tf": 2.8284271247461903}, "game.snake.Snake.is_valid_sacrifice": {"tf": 2.8284271247461903}, "game.snake.Snake.can_move": {"tf": 3.872983346207417}, "game.snake.Snake.get_valid_directions": {"tf": 2.6457513110645907}, "game.snake.Snake.get_apples_eaten": {"tf": 2}, "game.snake.Snake.apply_bid": {"tf": 2.23606797749979}, "game.snake.Snake.get_last_cells": {"tf": 2.449489742783178}, "game.snake.Snake.get_first_cells": {"tf": 2.449489742783178}, "game.snake.Snake.try_sacrifice": {"tf": 2.8284271247461903}, "game.snake.Snake.apply_sacrifice": {"tf": 3}, "game.snake.Snake.apply_head_move": {"tf": 3.1622776601683795}, "game.snake.Snake.try_trap": {"tf": 2.6457513110645907}, "game.snake.Snake.try_move": {"tf": 3.605551275463989}, "game.snake.Snake.push_trap": {"tf": 2.6457513110645907}, "game.snake.Snake.push_head_cell": {"tf": 1.7320508075688772}, "game.snake.Snake.push_move": {"tf": 3.7416573867739413}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 165, "n": {"docs": {"game": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}}, "df": 7}, "s": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 6}}, "y": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}}, "df": 3}, "m": {"docs": {"game.board.Board": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 5}, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 3}, "game.board.Board": {"tf": 2}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 25}, "n": {"docs": {"game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 1}}}, "o": {"docs": {"game": {"tf": 3.7416573867739413}, "game.board.Board": {"tf": 1.7320508075688772}, "game.board.Board.__init__": {"tf": 2.449489742783178}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.set_build_history": {"tf": 1.7320508075688772}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 2.8284271247461903}, "game.board.Board.check_turn_start": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 2.23606797749979}, "game.board.Board.apply_move": {"tf": 3.1622776601683795}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 2.23606797749979}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_map.Map": {"tf": 1}, "game.game_queue.Queue": {"tf": 2.23606797749979}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 3}, "game.player_board.PlayerBoard.apply_turn": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.end_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1.7320508075688772}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.7320508075688772}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 102, "s": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}, "p": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}}, "df": 1}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_many_head": {"tf": 1.7320508075688772}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 4.58257569495584}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 2.449489742783178}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 3}, "game.board.Board.check_turn_start": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.apply_turn": {"tf": 3}, "game.player_board.PlayerBoard.end_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 33, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1.4142135623730951}}, "df": 4}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1.7320508075688772}, "game.board.Board.forecast_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_turn": {"tf": 1.7320508075688772}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 2}}, "df": 6, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.increment_decay": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"game.board.Board.apply_turn": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1}}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 2.8284271247461903}, "game.game_map.Map.reflect": {"tf": 1}}, "df": 2, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 2}, "game.board.Board.forecast_trap": {"tf": 2}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 2}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 2}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 2}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 2}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 2}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 2}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}}, "df": 24, "s": {"docs": {"game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}}, "df": 9}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.push_move": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 78}}, "y": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 6}, "n": {"docs": {"game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue": {"tf": 2.23606797749979}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_many_head": {"tf": 1.7320508075688772}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 2}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 20}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 2, "n": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"game": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 3, "s": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 2.6457513110645907}, "game.snake.Snake.can_move": {"tf": 2.23606797749979}, "game.snake.Snake.get_valid_directions": {"tf": 1.7320508075688772}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 17, "s": {"docs": {"game": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.get_history": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.snake.Snake.get_unqueued_length": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 3}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}}, "df": 7, "s": {"docs": {"game.board.Board.__init__": {"tf": 1.7320508075688772}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 53}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 3, "s": {"docs": {"game.board.Board.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.increment_decay": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 7, "s": {"docs": {"game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.snake.Snake.apply_bid": {"tf": 1}}, "df": 1}, "d": {"docs": {"game.snake.Snake.apply_bid": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.get_board_string": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"game.game_map.Map": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"game.player_board.PlayerBoard.get_queued_length": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1, "s": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1}, "d": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 26}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.forecast_bid": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 2}, "game.board.Board": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 2}, "game.board.Board.is_valid_trap": {"tf": 2}, "game.board.Board.is_valid_action": {"tf": 2}, "game.board.Board.is_valid_move": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.check_turn_start": {"tf": 1.7320508075688772}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 2}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.__init__": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 3}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 2}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 67, "s": {"docs": {"game": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 4}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "d": {"docs": {"game.board.Board.get_map_generated": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}}, "df": 1, "d": {"docs": {"game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 5, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.7320508075688772}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 2, "s": {"docs": {"game.board.Board.get_board_string": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 2}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 2}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 104}}}}}}}, "t": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1, "s": {"docs": {"game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 5}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 8, "s": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 6}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.try_action": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.try_action": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.get_length": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.snake.Snake.get_unqueued_length": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}}, "df": 4}}}}}}}}}}, "a": {"docs": {"game": {"tf": 4}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1.4142135623730951}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_trap": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1.7320508075688772}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 2}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 2}, "game.board.Board.apply_move": {"tf": 2}, "game.board.Board.get_history": {"tf": 1.4142135623730951}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.7320508075688772}, "game.board.Board.forecast_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_turn": {"tf": 1.7320508075688772}, "game.board.Board.get_board_string": {"tf": 3.1622776601683795}, "game.game_map.Map.reflect": {"tf": 1}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.__init__": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_action": {"tf": 2}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 2}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 104, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {"game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1.7320508075688772}, "game.board.Board.has_apple": {"tf": 2}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.enums.Result": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Cell": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}}, "df": 25, "d": {"docs": {"game": {"tf": 3.605551275463989}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_map.Map": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_queue.Queue": {"tf": 1.7320508075688772}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.7320508075688772}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 48, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1.7320508075688772}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 28, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.apply_turn": {"tf": 1}}, "df": 1}}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {"game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}}, "df": 3}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 18}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}}, "df": 26, "s": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}}, "df": 3}}}, "[": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}}, "df": 12}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 3.3166247903554}, "game.board.Board.is_valid_action": {"tf": 2.449489742783178}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 2.23606797749979}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 2}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.apply_move": {"tf": 2.23606797749979}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.try_action": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.apply_action": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 2}, "game.player_board.PlayerBoard.apply_turn": {"tf": 2}, "game.player_board.PlayerBoard.forecast_action": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.7320508075688772}, "game.snake.Snake.get_direction": {"tf": 2}, "game.snake.Snake.get_next_loc": {"tf": 2.6457513110645907}, "game.snake.Snake.is_valid_direction": {"tf": 2.8284271247461903}, "game.snake.Snake.can_move": {"tf": 2.6457513110645907}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 2}, "game.snake.Snake.try_move": {"tf": 1.7320508075688772}, "game.snake.Snake.push_move": {"tf": 1.7320508075688772}}, "df": 37, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 11, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.can_move": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_queued_length": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_max_length": {"tf": 1.7320508075688772}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 3}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 3}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}}, "df": 20, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 8}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 13}, "d": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 23}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}}, "df": 5}}}}}}}, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1.7320508075688772}, "game.board.Board.has_apple": {"tf": 2}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 12, "s": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}}, "df": 11}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "t": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.check_turn_start": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}}, "df": 21}, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.next_turn": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 16}}}}}, "i": {"docs": {"game": {"tf": 2.6457513110645907}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 5, "n": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 41, "t": {"docs": {"game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 66, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 4}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.resolve_square": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 6}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 2}}, "df": 5, "s": {"docs": {"game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 9}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}}, "df": 4}, "d": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}}, "df": 3}}}, "e": {"docs": {"game.board.Board.get_copy": {"tf": 1}}, "df": 1, "s": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"game": {"tf": 3.4641016151377544}, "game.board.Board": {"tf": 2}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 2.6457513110645907}, "game.board.Board.is_valid_move": {"tf": 2.6457513110645907}, "game.board.Board.is_valid_turn": {"tf": 2.23606797749979}, "game.board.Board.is_valid_cell": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 2.449489742783178}, "game.board.Board.check_turn_start": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 2.449489742783178}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_queue.Queue": {"tf": 1.7320508075688772}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.__init__": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 2}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 2}, "game.player_board.PlayerBoard.apply_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_trap": {"tf": 2}, "game.snake.Snake.is_valid_direction": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 2.449489742783178}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.7320508075688772}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 72}, "f": {"docs": {"game": {"tf": 3.1622776601683795}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 2.23606797749979}, "game.board.Board.is_valid_move": {"tf": 2.23606797749979}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 2}, "game.board.Board.check_turn_start": {"tf": 1.4142135623730951}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 2}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.__init__": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 2}, "game.snake.Snake.is_valid_direction": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_sacrifice": {"tf": 2}, "game.snake.Snake.can_move": {"tf": 2.23606797749979}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.7320508075688772}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 94}, "t": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 30, "s": {"docs": {"game": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4, "[": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 7}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 7}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 3}, "game.game_map.Map": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 57, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 3}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.forecast_bid": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}}, "df": 15, "a": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.get_history_json": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}}, "df": 5}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"game": {"tf": 2}, "game.board.Board.resolve_bid": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_many_head": {"tf": 1.7320508075688772}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 29}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}}, "df": 9, "s": {"docs": {"game": {"tf": 3.3166247903554}, "game.board.Board": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 2}}, "df": 3, "/": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 81}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"game": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.7320508075688772}, "game.snake.Snake.get_apples_eaten": {"tf": 1}}, "df": 8}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.set_build_history": {"tf": 1.7320508075688772}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_queue.Queue": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 2}, "game.game_queue.Queue.peek_many_head": {"tf": 1.7320508075688772}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 2}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 2}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 2.23606797749979}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1.7320508075688772}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_dim_y": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 13, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 2.23606797749979}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 2.6457513110645907}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1.4142135623730951}, "game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1.4142135623730951}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.snake.Snake": {"tf": 1.4142135623730951}}, "df": 28}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake.get_length": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1, "n": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_map.Map.reflect": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 25}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 3}, "game.board.Board.get_history": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.get_map_generated": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.player_board.PlayerBoard.get_time_left": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}}, "df": 20, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1}}, "s": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 3}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_queue.Queue.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.7320508075688772}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1.7320508075688772}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 17}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.increment_decay": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 22}}}, "s": {"docs": {"game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1, "s": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}}, "df": 15, "s": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_map.Map.reflect": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1}}, "df": 22}}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_action": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_move": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.7320508075688772}, "game.snake.Snake.get_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_direction": {"tf": 2}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 2.23606797749979}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 55, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 2}, "game.player_board.PlayerBoard.has_apple": {"tf": 2}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 2.23606797749979}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 2.449489742783178}, "game.snake.Snake.get_first_cells": {"tf": 2.449489742783178}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 15}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 32, "s": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 32}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake.push_trap": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {"game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2.8284271247461903}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 2}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 26, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}}, "df": 2}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_board_string": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "w": {"docs": {"game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 2}, "game.board.Board.is_valid_bid": {"tf": 2}, "game.board.Board.resolve_bid": {"tf": 2}, "game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 2}, "game.player_board.PlayerBoard.apply_bid": {"tf": 2}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 2.23606797749979}, "game.snake.Snake.is_valid_bid": {"tf": 2.23606797749979}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}}, "df": 3}, "a": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}, "b": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 3.605551275463989}, "game.board.Board": {"tf": 2}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.next_turn": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.7320508075688772}, "game.board.Board.forecast_trap": {"tf": 1.7320508075688772}, "game.board.Board.forecast_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_turn": {"tf": 1.7320508075688772}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.__init__": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.end_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 2}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 2}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 42}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"game": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 1.7320508075688772}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 86, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}}, "df": 6}}}}, "d": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}}, "df": 3}, "t": {"docs": {"game.snake.Snake": {"tf": 1}}, "df": 1}}}, "g": {"docs": {"game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"game": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 8}}}}, "y": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1.4142135623730951}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}}, "df": 26, "t": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_time_left": {"tf": 2}}, "df": 2}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}}, "df": 1}}, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 2}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_max_length": {"tf": 2}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.get_unqueued_length": {"tf": 1.7320508075688772}, "game.snake.Snake.get_length": {"tf": 2}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 3}, "game.snake.Snake.is_valid_sacrifice": {"tf": 2}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.eat_apple": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}}, "df": 17, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {"game.player_board.PlayerBoard.try_move": {"tf": 1}}, "df": 1, "t": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 4}}, "w": {"docs": {"game": {"tf": 1}}, "df": 1}, "c": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 7, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 2}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 2}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.7320508075688772}}, "df": 16, "s": {"docs": {"game.player_board.PlayerBoard.get_all_locations": {"tf": 2}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2.449489742783178}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"game.snake.Snake.can_move": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 10}}, "f": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}}, "df": 2, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_trap_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2.23606797749979}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}}, "df": 3}}}}, "s": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 2}, "game.player_board.PlayerBoard.get_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2.6457513110645907}, "game.snake.Snake.get_next_loc": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 47, "o": {"docs": {"game.board.Board": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}}, "df": 2, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 9}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 14}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.start": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.resolve_bid": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.7320508075688772}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.snake.Snake.start": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.game_map.Map": {"tf": 1}}, "df": 1, "d": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {"game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2}, "game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}}, "df": 4}}}}}, "t": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 2, "s": {"docs": {"game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}}, "df": 2}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 6}}}}}}, "e": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}}, "df": 1, "n": {"docs": {"game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 3}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"game.game_queue.Queue": {"tf": 2.23606797749979}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 3.1622776601683795}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 2}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 2}, "game.player_board.PlayerBoard.get_length": {"tf": 2}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 2}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 2}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 2}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 2}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 2.6457513110645907}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1.7320508075688772}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.start": {"tf": 1.7320508075688772}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.get_unqueued_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_trap": {"tf": 2}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1.7320508075688772}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_copy": {"tf": 1.7320508075688772}}, "df": 57, "s": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1.7320508075688772}, "game.snake.Snake.start": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 7, "d": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 5}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 3, "s": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}}, "df": 7}, "d": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"game": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.__init__": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}}, "df": 15}}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"game.player_board.PlayerBoard.get_future_apples": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.check_turn_start": {"tf": 1}}, "df": 1}}, "s": {"docs": {"game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1.4142135623730951}}, "df": 4}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1, "s": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 6, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 15}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.apply_action": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {"game": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 8}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 2.23606797749979}, "game.board.Board.apply_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 2}, "game.player_board.PlayerBoard.try_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.7320508075688772}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 2.23606797749979}, "game.snake.Snake.can_move": {"tf": 2.23606797749979}, "game.snake.Snake.try_sacrifice": {"tf": 2.23606797749979}, "game.snake.Snake.apply_sacrifice": {"tf": 2.23606797749979}, "game.snake.Snake.try_move": {"tf": 1.7320508075688772}, "game.snake.Snake.push_move": {"tf": 1.7320508075688772}}, "df": 18}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_square": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}}, "df": 1}}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 2}, "game.board.Board.is_valid_move": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 24, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 2}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 2}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 2}, "game.player_board.PlayerBoard.apply_turn": {"tf": 2}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}}, "df": 21}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}}, "df": 7, "d": {"docs": {"game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_move": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 23, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 2}, "game.game_queue.Queue.peek_many_head": {"tf": 1.7320508075688772}, "game.game_queue.Queue.push_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 12}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.snake.Snake": {"tf": 1}}, "df": 1}}}}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1, "l": {"docs": {}, "df": 0, "l": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1, "l": {"docs": {"game": {"tf": 2}, "game.board.Board": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 10}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"game": {"tf": 2}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 21, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 4}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1.4142135623730951}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.get_dim_x": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}}, "df": 6}, "r": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 9, "a": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue.__init__": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}}, "df": 37}}}}}, "y": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}}, "df": 10}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_bid": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}}, "df": 22}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 17}, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1}}, "y": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1, "s": {"docs": {"game.board.Board.get_board_string": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"game": {"tf": 1}}, "df": 1, "s": {"docs": {"game": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard": {"tf": 1}, "game.snake.Snake": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 8}}}}}, "e": {"docs": {"game": {"tf": 2.6457513110645907}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}}, "df": 16, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1}, "h": {"docs": {"game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 6}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.7320508075688772}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {"game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"game.player_board.PlayerBoard.end_turn": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 2}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_max_length": {"tf": 2.23606797749979}}, "df": 39}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}}, "df": 13, "s": {"docs": {"game": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1.7320508075688772}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 33}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.enums.Result": {"tf": 1}, "game.enums.Action": {"tf": 1}, "game.enums.Cell": {"tf": 1}}, "df": 3}}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.get_history_json": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.get_history_json": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 4, "s": {"docs": {"game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 10}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.get_win_reason": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1, "t": {"docs": {"game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 6}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.resolve_bid": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {"game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "y": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.is_portal": {"tf": 2}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 31, "o": {"docs": {}, "df": 0, "u": {"docs": {"game": {"tf": 4.123105625617661}}, "df": 1, "r": {"docs": {"game": {"tf": 2}, "game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.4142135623730951}, "game.snake.Snake.try_trap": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 29}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 2}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.snake.Snake": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 4, "s": {"docs": {"game": {"tf": 2}, "game.board.Board.is_as_turn": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_bid": {"tf": 1.4142135623730951}, "game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_trap": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.4142135623730951}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.4142135623730951}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_min_player_size": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 2}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 2}, "game.player_board.PlayerBoard.get_length": {"tf": 2}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 2}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 2}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_time_left": {"tf": 2}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.player_board.PlayerBoard.get_max_length": {"tf": 2}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1.7320508075688772}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.get_lengthen_coef": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 136}, "e": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 5, "s": {"docs": {"game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}, "game.snake.Snake.get_length": {"tf": 1}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_apples_eaten": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 19}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 4, "s": {"docs": {"game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.reverse_perspective": {"tf": 1}}, "df": 4}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 1, "s": {"docs": {"game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}}, "df": 3}, "d": {"docs": {"game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_sacrifice": {"tf": 1.4142135623730951}}, "df": 6}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.7320508075688772}}, "df": 3}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.set_build_history": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.set_build_history": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.next_turn": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.get_history_json": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game.board.Board.set_winner": {"tf": 1.7320508075688772}, "game.board.Board.get_win_reason": {"tf": 1.4142135623730951}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_winner": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 5}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.resolve_square": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"game.board.Board.resolve_bid": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"game.board.Board.get_bid_resolved": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.resolve_square": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.snake.Snake.reset": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.get_history": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game.game_map.Map.reflect": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.push_move": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"game.player_board.PlayerBoard.get_current_apples": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 5}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue.pop_many": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}, "game.game_map.Map.get_recorded_map": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1, "f": {"docs": {"game": {"tf": 2.8284271247461903}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.__init__": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.tiebreak": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.get_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_history_json": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_cell_copy": {"tf": 1.4142135623730951}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1.4142135623730951}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.7320508075688772}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.get_map_generated": {"tf": 1}, "game.board.Board.get_copy": {"tf": 1.7320508075688772}, "game.board.Board.forecast_trap": {"tf": 1.4142135623730951}, "game.board.Board.forecast_move": {"tf": 2}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 2.6457513110645907}, "game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_map.Map.reflect": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1.4142135623730951}, "game.game_queue.Queue.get_copy": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 2}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_dim_y": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_direction": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 2}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 2}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 2.449489742783178}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 2}, "game.player_board.PlayerBoard.get_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.try_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 2}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 2}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.forecast_action": {"tf": 2}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 2}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_copy": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 2}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 2}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.currently_decaying": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_future_decay_intervals": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1.7320508075688772}, "game.snake.Snake.start": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 2}, "game.snake.Snake.get_tail_loc": {"tf": 2}, "game.snake.Snake.get_all_loc": {"tf": 2.23606797749979}, "game.snake.Snake.get_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.get_unqueued_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_length": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1.7320508075688772}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.7320508075688772}, "game.snake.Snake.get_first_cells": {"tf": 1.7320508075688772}, "game.snake.Snake.try_sacrifice": {"tf": 2}, "game.snake.Snake.apply_sacrifice": {"tf": 1.7320508075688772}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_copy": {"tf": 1.4142135623730951}}, "df": 118}, "u": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"game": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.set_winner": {"tf": 1.4142135623730951}, "game.board.Board.get_win_reason": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {"game": {"tf": 2.449489742783178}, "game.board.Board": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 2}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 2}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1.4142135623730951}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_last_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 2}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 2}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_max_length": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 37, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"game": {"tf": 1}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.spawn_apples": {"tf": 1}, "game.board.Board.get_map_generated": {"tf": 1}, "game.game_queue.Queue": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_portal": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 29, "l": {"docs": {}, "df": 0, "y": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"game.board.Board.resolve_square": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.4142135623730951}}, "df": 2}, "c": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1.4142135623730951}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}}, "df": 2, "s": {"docs": {"game.board.Board.tiebreak": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 6}, "s": {"docs": {"game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}}, "df": 3}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}}, "df": 12}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"game.snake.Snake.is_valid_direction": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.__init__": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "l": {"docs": {"game.board.Board.__init__": {"tf": 1.7320508075688772}, "game.board.Board.set_winner": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1.4142135623730951}, "game.board.Board.apply_turn": {"tf": 1.7320508075688772}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1.4142135623730951}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.apply_move": {"tf": 1.7320508075688772}, "game.board.Board.get_copy": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1.4142135623730951}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.__init__": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_direction": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_length": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_am_player_a": {"tf": 1}, "game.player_board.PlayerBoard.get_time_left": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.end_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 68, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.end_turn": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.game_queue.Queue": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.has_apple_tuple": {"tf": 1}, "game.board.Board.has_apple": {"tf": 1}, "game.board.Board.is_valid_bid": {"tf": 1}, "game.board.Board.get_bid_resolved": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_move": {"tf": 1}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.game_queue.Queue.is_empty": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_bid": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_trap": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1}, "game.player_board.PlayerBoard.has_apple": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.is_portal": {"tf": 1}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 43}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"game": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.get_copy": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}, "game.snake.Snake.__init__": {"tf": 1}, "game.snake.Snake.get_copy": {"tf": 1}}, "df": 4, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.player_board.PlayerBoard.is_game_over": {"tf": 1.4142135623730951}}, "df": 1}}}}, "x": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board": {"tf": 1.4142135623730951}, "game.board.Board.has_apple_tuple": {"tf": 1.4142135623730951}, "game.board.Board.has_apple": {"tf": 1.7320508075688772}, "game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_dim_x": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_future_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds_xy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_my_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_enemy_trap_life": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_my_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_enemy_trap": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.has_apple": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.is_portal": {"tf": 2}, "game.player_board.PlayerBoard.cell_occupied_by": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 32}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"game": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}}, "df": 5, "[": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"game": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard.__init__": {"tf": 1}}, "df": 2}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.get_a_time": {"tf": 1}, "game.board.Board.get_b_time": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 6}}, "p": {"docs": {"game.board.Board.__init__": {"tf": 2.449489742783178}, "game.board.Board.cell_in_bounds": {"tf": 1.4142135623730951}, "game.board.Board.get_map_generated": {"tf": 1.4142135623730951}, "game.board.Board.get_board_string": {"tf": 1.7320508075688772}, "game.game_map.Map": {"tf": 1.4142135623730951}, "game.game_map.Map.reflect": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}}, "df": 10, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.next_turn": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"game.player_board.PlayerBoard.apply_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {"game.snake.Snake.eat_apple": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.player_board.PlayerBoard.get_max_length": {"tf": 2}, "game.snake.Snake.get_max_traps": {"tf": 2}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.increment_decay": {"tf": 1}}, "df": 1, "s": {"docs": {"game": {"tf": 1.7320508075688772}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"game.board.Board.next_turn": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.get_board_string": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 2.23606797749979}, "game.board.Board.apply_move": {"tf": 2.8284271247461903}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 2.449489742783178}, "game.game_queue.Queue.push": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 2}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 2}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.get_possible_directions": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_move": {"tf": 2}, "game.player_board.PlayerBoard.try_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 3}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.forecast_move": {"tf": 2.449489742783178}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.reset": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1.4142135623730951}, "game.snake.Snake.try_move": {"tf": 1.7320508075688772}, "game.snake.Snake.push_move": {"tf": 1.7320508075688772}}, "df": 26, "s": {"docs": {"game.board.Board": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 9}, "d": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}}, "df": 3}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.eat_apple": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.apply_trap": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 9}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}}, "df": 3}}}}}}}, "y": {"docs": {"game.player_board.PlayerBoard.apply_bid": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {"game.snake.Snake.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.player_board.PlayerBoard.get_min_player_size": {"tf": 1.4142135623730951}, "game.snake.Snake.__init__": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_bid": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"game.snake.Snake.is_valid_bid": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board.increment_decay": {"tf": 1}, "game.board.Board.next_turn": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_next_decay_interval": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1.4142135623730951}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 7}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.next_turn": {"tf": 1}, "game.snake.Snake.increment_sacrifice": {"tf": 1}, "game.snake.Snake.eat_apple": {"tf": 1}}, "df": 3}}}}}}}, "w": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.forecast_bid": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.get_copy": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1.7320508075688772}}, "df": 11}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"game.game_queue.Queue": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "o": {"docs": {"game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_turn": {"tf": 1}}, "df": 4, "t": {"docs": {"game": {"tf": 1.4142135623730951}, "game.board.Board": {"tf": 1}, "game.board.Board.set_build_history": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.player_board.PlayerBoard": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_direction": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_action": {"tf": 1}, "game.player_board.PlayerBoard.forecast_trap": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_my_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_enemy_turn": {"tf": 1}, "game.player_board.PlayerBoard.is_occupied": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_current_decay_interval": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1.4142135623730951}, "game.snake.Snake.can_move": {"tf": 2}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1.4142135623730951}}, "df": 41, "e": {"docs": {"game": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}}, "df": 2}}, "n": {"docs": {"game.board.Board.forecast_trap": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.board.Board.forecast_turn": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.7320508075688772}}, "df": 4, "e": {"docs": {"game.board.Board.apply_move": {"tf": 1}, "game.board.Board.forecast_move": {"tf": 1}, "game.player_board.PlayerBoard.apply_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_action": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.forecast_move": {"tf": 1}, "game.snake.Snake.get_direction": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1}}, "df": 9}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.7320508075688772}, "game.snake.Snake.get_first_cells": {"tf": 1.7320508075688772}}, "df": 7, "p": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1.4142135623730951}, "game.snake.Snake": {"tf": 1}, "game.snake.Snake.start": {"tf": 1.4142135623730951}, "game.snake.Snake.get_head_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_tail_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_all_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.get_first_cells": {"tf": 1.4142135623730951}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 42}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.player_board.PlayerBoard.get_apples_eaten": {"tf": 1.7320508075688772}, "game.player_board.PlayerBoard.get_turn_count": {"tf": 1}, "game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 2.23606797749979}, "game.player_board.PlayerBoard.get_traps_placed": {"tf": 2}, "game.player_board.PlayerBoard.get_traps_limit": {"tf": 2}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1}, "game.snake.Snake.get_max_traps": {"tf": 1.4142135623730951}, "game.snake.Snake.get_apples_eaten": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}}, "df": 17}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"game.board.Board.is_valid_cell": {"tf": 1}, "game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_all": {"tf": 1}, "game.game_queue.Queue.peek_many_tail": {"tf": 1}, "game.game_queue.Queue.peek_many_head": {"tf": 1}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1}, "game.game_queue.Queue.pop_many": {"tf": 1}, "game.player_board.PlayerBoard.get_current_apples": {"tf": 1}, "game.player_board.PlayerBoard.get_head_location": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_location": {"tf": 1}, "game.player_board.PlayerBoard.get_head_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_tail_cells": {"tf": 1}, "game.player_board.PlayerBoard.get_all_locations": {"tf": 1}, "game.player_board.PlayerBoard.get_loc_after_move": {"tf": 1}, "game.player_board.PlayerBoard.cell_in_bounds": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_trap": {"tf": 1}, "game.player_board.PlayerBoard.try_action": {"tf": 1}, "game.player_board.PlayerBoard.get_snake_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_trap_mask_enemy": {"tf": 1}, "game.player_board.PlayerBoard.get_wall_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_mask": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}, "game.player_board.PlayerBoard.get_apple_mask": {"tf": 1}, "game.snake.Snake.start": {"tf": 1}, "game.snake.Snake.get_head_loc": {"tf": 1}, "game.snake.Snake.get_tail_loc": {"tf": 1}, "game.snake.Snake.get_all_loc": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1.4142135623730951}, "game.snake.Snake.get_last_cells": {"tf": 1}, "game.snake.Snake.get_first_cells": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}, "game.snake.Snake.try_trap": {"tf": 1}, "game.snake.Snake.try_move": {"tf": 1}, "game.snake.Snake.push_trap": {"tf": 1}, "game.snake.Snake.push_head_cell": {"tf": 1}, "game.snake.Snake.push_move": {"tf": 1}}, "df": 41}}}}}}, "p": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1}, "game.game_queue.Queue.peek_tail": {"tf": 1}, "game.player_board.PlayerBoard.get_portal_dest": {"tf": 1}}, "df": 4}, "*": {"docs": {}, "df": 0, "t": {"docs": {"game.game_map.Map.add_apple_spawns": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1.7320508075688772}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.get_board_string": {"tf": 1}, "game.player_board.PlayerBoard.is_game_over": {"tf": 1}}, "df": 4, "d": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_trap": {"tf": 1}, "game.board.Board.is_valid_action": {"tf": 1}, "game.board.Board.is_valid_move": {"tf": 1.4142135623730951}, "game.board.Board.is_valid_turn": {"tf": 1}, "game.board.Board.apply_decay": {"tf": 1}, "game.board.Board.apply_turn": {"tf": 1}, "game.board.Board.check_turn_start": {"tf": 1}, "game.board.Board.apply_trap": {"tf": 1}, "game.board.Board.resolve_square": {"tf": 1}, "game.board.Board.apply_move": {"tf": 1}, "game.game_map.Map": {"tf": 1}, "game.player_board.PlayerBoard.is_possible_move": {"tf": 1}, "game.player_board.PlayerBoard.is_valid_move": {"tf": 1}, "game.player_board.PlayerBoard.try_move": {"tf": 1}, "game.player_board.PlayerBoard.try_sacrifice": {"tf": 1}, "game.player_board.PlayerBoard.apply_sacrifice": {"tf": 1}, "game.snake.Snake.get_next_loc": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 1.4142135623730951}, "game.snake.Snake.is_valid_direction": {"tf": 1}, "game.snake.Snake.is_valid_sacrifice": {"tf": 1}, "game.snake.Snake.can_move": {"tf": 1.7320508075688772}, "game.snake.Snake.get_valid_directions": {"tf": 1}, "game.snake.Snake.try_sacrifice": {"tf": 1}, "game.snake.Snake.apply_sacrifice": {"tf": 1}}, "df": 25}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}, "game.board.Board.is_valid_cell_copy": {"tf": 1}, "game.game_queue.Queue": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.is_valid_cell_copy": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"game.board.Board.cell_in_bounds": {"tf": 1}}, "df": 1}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"game.player_board.PlayerBoard.get_unqueued_length": {"tf": 1}, "game.snake.Snake.is_valid_trap": {"tf": 2.23606797749979}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"game.player_board.PlayerBoard.get_traps_until_limit": {"tf": 1.4142135623730951}, "game.player_board.PlayerBoard.get_next_decay_event": {"tf": 1.4142135623730951}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"game.board.Board.increment_decay": {"tf": 1}, "game.snake.Snake.apply_head_move": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"game.game_map.Map": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"game": {"tf": 1}, "game.game_queue.Queue": {"tf": 2}, "game.game_queue.Queue.__init__": {"tf": 2}, "game.game_queue.Queue.get_copy": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push": {"tf": 1}, "game.game_queue.Queue.peek_head": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_tail": {"tf": 1.4142135623730951}, "game.game_queue.Queue.peek_all": {"tf": 1.4142135623730951}, "game.game_queue.Queue.push_many": {"tf": 1}, "game.game_queue.Queue.pop": {"tf": 1.4142135623730951}, "game.game_queue.Queue.pop_many": {"tf": 1.7320508075688772}, "game.game_queue.Queue.is_empty": {"tf": 1.4142135623730951}, "game.snake.Snake": {"tf": 1.4142135623730951}, "game.snake.Snake.push_head_cell": {"tf": 1}}, "df": 14, "d": {"docs": {"game.player_board.PlayerBoard.get_queued_length": {"tf": 1}, "game.snake.Snake.get_unqueued_length": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"game.snake.Snake.eat_apple": {"tf": 1}}, "df": 1}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"game.board.Board.resolve_square": {"tf": 1}}, "df": 1}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1, "s": {"docs": {"game.player_board.PlayerBoard.get_portal_dict": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();